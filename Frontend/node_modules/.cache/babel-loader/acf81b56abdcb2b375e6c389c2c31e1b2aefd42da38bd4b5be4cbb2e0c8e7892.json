{"ast":null,"code":"// import React, { useState, useEffect } from 'react';\n// import { useParams, useNavigate } from 'react-router-dom';\n// import ApiService from '../../service/ApiService'; // Assuming your service is in a file called ApiService.js\n// import DatePicker from 'react-datepicker';\n// // import 'react-datepicker/dist/react-datepicker.css';\n\n// const RoomDetailsPage = () => {\n//   const navigate = useNavigate(); // Access the navigate function to navigate\n//   const { roomId } = useParams(); // Get room ID from URL parameters\n//   const [roomDetails, setRoomDetails] = useState(null);\n//   const [isLoading, setIsLoading] = useState(true); // Track loading state\n//   const [error, setError] = useState(null); // Track any errors\n//   const [checkInDate, setCheckInDate] = useState(null); // State variable for check-in date\n//   const [checkOutDate, setCheckOutDate] = useState(null); // State variable for check-out date\n//   const [numAdults, setNumAdults] = useState(1); // State variable for number of adults\n//   const [numChildren, setNumChildren] = useState(0); // State variable for number of children\n//   const [totalPrice, setTotalPrice] = useState(0); // State variable for total booking price\n//   const [totalGuests, setTotalGuests] = useState(1); // State variable for total number of guests\n//   const [showDatePicker, setShowDatePicker] = useState(false); // State variable to control date picker visibility\n//   const [userId, setUserId] = useState(''); // Set user id\n//   const [showMessage, setShowMessage] = useState(false); // State variable to control message visibility\n//   const [confirmationCode, setConfirmationCode] = useState(''); // State variable for booking confirmation code\n//   const [errorMessage, setErrorMessage] = useState(''); // State variable for error message\n\n//   useEffect(() => {\n//     const fetchData = async () => {\n//       try {\n//         setIsLoading(true); // Set loading state to true\n//         const response = await ApiService.getRoomById(roomId);\n//         setRoomDetails(response.room);\n//         const userProfile = await ApiService.getUserProfile();\n//         setUserId(userProfile.user.id);\n\n//       } catch (error) {\n//         setError(error.response?.data?.message || error.message);\n//       } finally {\n//         setIsLoading(false); // Set loading state to false after fetching or error\n//       }\n//     };\n//     fetchData();\n//   }, [roomId]); // Re-run effect when roomId changes\n\n//   const handleConfirmBooking = async () => {\n//     // Check if check-in and check-out dates are selected\n//     if (!checkInDate || !checkOutDate) {\n//       setErrorMessage('Please select check-in and check-out dates.');\n//       setTimeout(() => setErrorMessage(''), 5000); // Clear error message after 5 seconds\n//       return;\n//     }\n\n//     // Check if number of adults and children are valid\n//     if (isNaN(numAdults) || numAdults < 1 || isNaN(numChildren) || numChildren < 0) {\n//       setErrorMessage('Please enter valid numbers for adults and children.');\n//       setTimeout(() => setErrorMessage(''), 5000); // Clear error message after 5 seconds\n//       return;\n//     }\n\n//     // Calculate total number of days\n//     const oneDay = 24 * 60 * 60 * 1000; // hours * minutes * seconds * milliseconds\n//     const startDate = new Date(checkInDate);\n//     const endDate = new Date(checkOutDate);\n//     const totalDays = Math.round(Math.abs((endDate - startDate) / oneDay)) + 1;\n\n//     // Calculate total number of guests\n//     const totalGuests = numAdults + numChildren;\n\n//     // Calculate total price\n//     const roomPricePerNight = roomDetails.roomPrice;\n//     const totalPrice = roomPricePerNight * totalDays;\n\n//     setTotalPrice(totalPrice);\n//     setTotalGuests(totalGuests);\n//   };\n\n//   const acceptBooking = async () => {\n//     try {\n\n//       // Ensure checkInDate and checkOutDate are Date objects\n//       const startDate = new Date(checkInDate);\n//       const endDate = new Date(checkOutDate);\n\n//       // Log the original dates for debugging\n//       console.log(\"Original Check-in Date:\", startDate);\n//       console.log(\"Original Check-out Date:\", endDate);\n\n//       // Convert dates to YYYY-MM-DD format, adjusting for time zone differences\n//       const formattedCheckInDate = new Date(startDate.getTime() - (startDate.getTimezoneOffset() * 60000)).toISOString().split('T')[0];\n//       const formattedCheckOutDate = new Date(endDate.getTime() - (endDate.getTimezoneOffset() * 60000)).toISOString().split('T')[0];\n\n//       // Log the original dates for debugging\n//       console.log(\"Formated Check-in Date:\", formattedCheckInDate);\n//       console.log(\"Formated Check-out Date:\", formattedCheckOutDate);\n\n//       // Create booking object\n//       const booking = {\n//         checkInDate: formattedCheckInDate,\n//         checkOutDate: formattedCheckOutDate,\n//         numOfAdults: numAdults,\n//         numOfChildren: numChildren\n//       };\n//       console.log(booking)\n//       console.log(checkOutDate)\n\n//       // Make booking\n//       const response = await ApiService.bookRoom(roomId, userId, booking);\n//       if (response.statusCode === 200) {\n//         setConfirmationCode(response.bookingConfirmationCode); // Set booking confirmation code\n//         setShowMessage(true); // Show message\n//         // Hide message and navigate to homepage after 5 seconds\n//         setTimeout(() => {\n//           setShowMessage(false);\n//           navigate('/rooms'); // Navigate to rooms\n//         }, 10000);\n//       }\n//     } catch (error) {\n//       setErrorMessage(error.response?.data?.message || error.message);\n//       setTimeout(() => setErrorMessage(''), 5000); // Clear error message after 5 seconds\n//     }\n//   };\n\n//   if (isLoading) {\n//     return <p className='room-detail-loading'>Loading room details...</p>;\n//   }\n\n//   if (error) {\n//     return <p className='room-detail-loading'>{error}</p>;\n//   }\n\n//   if (!roomDetails) {\n//     return <p className='room-detail-loading'>Room not found.</p>;\n//   }\n\n//   const { roomType, roomPrice, roomPhoto, description, bookings } = roomDetails;\n\n//   return (\n//     <div className=\"room-details-booking\">\n//       {showMessage && (\n//         <p className=\"booking-success-message\">\n//           Booking successful! Confirmation code: {confirmationCode}. An SMS and email of your booking details have been sent to you.\n//         </p>\n//       )}\n//       {errorMessage && (\n//         <p className=\"error-message\">\n//           {errorMessage}\n//         </p>\n//       )}\n//       <h2>Room Details</h2>\n//       <br />\n//       {roomPhoto&& (\n//                             <img\n//                                 src={`data:image/jpeg;base64,${roomPhoto}`}\n//                                 alt={roomType}\n//                                 style={{ width: '200px', height: '150px' }}\n//                             />\n//                         )}\n//       <div className=\"room-details-info\">\n//         <h3>{roomType}</h3>\n//         <p>Price: â‚¹{roomPrice}</p>\n//         <p>{description}</p>\n//       </div>\n//       Booking list \n//       {/* {bookings && bookings.length > 0 && (\n//         <div>\n//           <h3>Existing Booking Details</h3>\n//           <ul className=\"booking-list\">\n//             {bookings.map((booking, index) => (\n//               <li key={booking.id} className=\"booking-item\">\n//                 <span className=\"booking-number\">Booking {index + 1} </span>\n//                 <span className=\"booking-text\">Check-in: {booking.checkInDate} </span>\n//                 <span className=\"booking-text\">Out: {booking.checkOutDate}</span>\n//               </li>\n//             ))}\n//           </ul>\n//         </div>\n//       )} */}\n//       <div className=\"booking-info\">\n//         <button className=\"book-now-button\" onClick={() => setShowDatePicker(true)}>Book Now</button>\n//         <button className=\"go-back-button\" onClick={() => setShowDatePicker(false)}>Go Back</button>\n//         {showDatePicker && (\n//           <div className=\"date-picker-container\">\n//             <DatePicker\n//               className=\"detail-search-field\"\n//               selected={checkInDate}\n//               onChange={(date) => setCheckInDate(date)}\n//               selectsStart\n//               startDate={checkInDate}\n//               endDate={checkOutDate}\n//               placeholderText=\"Check-in Date\"\n//               dateFormat=\"dd/MM/yyyy\"\n//               // dateFormat=\"yyyy-MM-dd\"\n//             />\n//             <DatePicker\n//               className=\"detail-search-field\"\n//               selected={checkOutDate}\n//               onChange={(date) => setCheckOutDate(date)}\n//               selectsEnd\n//               startDate={checkInDate}\n//               endDate={checkOutDate}\n//               minDate={checkInDate}\n\n//               placeholderText=\"Check-out Date\"\n//               // dateFormat=\"yyyy-MM-dd\"\n//               dateFormat=\"dd/MM/yyyy\"\n\n//             />\n\n//             <div className='guest-container'>\n//               <div className=\"guest-div\">\n//                 <label>Adults:</label>\n//                 <input\n//                   type=\"number\"\n//                   min=\"1\"\n//                   value={numAdults}\n//                   onChange={(e) => setNumAdults(parseInt(e.target.value))}\n//                 />\n//               </div>\n//               <div className=\"guest-div\">\n//                 <label>Children:</label>\n//                 <input\n//                   type=\"number\"\n//                   min=\"0\"\n//                   value={numChildren}\n//                   onChange={(e) => setNumChildren(parseInt(e.target.value))}\n//                 />\n//               </div>\n//               <button className=\"confirm-booking\" onClick={handleConfirmBooking}>Confirm Booking</button>\n//             </div>\n//           </div>\n//         )}\n//         {totalPrice > 0 && (\n//           <div className=\"total-price\">\n//             <p>Total Price: â‚¹{totalPrice}</p>\n//             <p>Total Guests: {totalGuests}</p>\n//             <button onClick={acceptBooking} className=\"accept-booking\">Accept Booking</button>\n//           </div>\n//         )}\n//       </div>\n//     </div>\n//   );\n// };\n\n// export default RoomDetailsPage;","map":{"version":3,"names":[],"sources":["C:/Users/A145499/OneDrive - AmerisourceBergen(ABC)/Desktop/Capstone_Project/CencoraCapstoneProject/Frontend/src/component/booking_rooms/RoomDetailsPage.jsx"],"sourcesContent":["// import React, { useState, useEffect } from 'react';\r\n// import { useParams, useNavigate } from 'react-router-dom';\r\n// import ApiService from '../../service/ApiService'; // Assuming your service is in a file called ApiService.js\r\n// import DatePicker from 'react-datepicker';\r\n// // import 'react-datepicker/dist/react-datepicker.css';\r\n\r\n// const RoomDetailsPage = () => {\r\n//   const navigate = useNavigate(); // Access the navigate function to navigate\r\n//   const { roomId } = useParams(); // Get room ID from URL parameters\r\n//   const [roomDetails, setRoomDetails] = useState(null);\r\n//   const [isLoading, setIsLoading] = useState(true); // Track loading state\r\n//   const [error, setError] = useState(null); // Track any errors\r\n//   const [checkInDate, setCheckInDate] = useState(null); // State variable for check-in date\r\n//   const [checkOutDate, setCheckOutDate] = useState(null); // State variable for check-out date\r\n//   const [numAdults, setNumAdults] = useState(1); // State variable for number of adults\r\n//   const [numChildren, setNumChildren] = useState(0); // State variable for number of children\r\n//   const [totalPrice, setTotalPrice] = useState(0); // State variable for total booking price\r\n//   const [totalGuests, setTotalGuests] = useState(1); // State variable for total number of guests\r\n//   const [showDatePicker, setShowDatePicker] = useState(false); // State variable to control date picker visibility\r\n//   const [userId, setUserId] = useState(''); // Set user id\r\n//   const [showMessage, setShowMessage] = useState(false); // State variable to control message visibility\r\n//   const [confirmationCode, setConfirmationCode] = useState(''); // State variable for booking confirmation code\r\n//   const [errorMessage, setErrorMessage] = useState(''); // State variable for error message\r\n\r\n//   useEffect(() => {\r\n//     const fetchData = async () => {\r\n//       try {\r\n//         setIsLoading(true); // Set loading state to true\r\n//         const response = await ApiService.getRoomById(roomId);\r\n//         setRoomDetails(response.room);\r\n//         const userProfile = await ApiService.getUserProfile();\r\n//         setUserId(userProfile.user.id);\r\n        \r\n//       } catch (error) {\r\n//         setError(error.response?.data?.message || error.message);\r\n//       } finally {\r\n//         setIsLoading(false); // Set loading state to false after fetching or error\r\n//       }\r\n//     };\r\n//     fetchData();\r\n//   }, [roomId]); // Re-run effect when roomId changes\r\n\r\n\r\n//   const handleConfirmBooking = async () => {\r\n//     // Check if check-in and check-out dates are selected\r\n//     if (!checkInDate || !checkOutDate) {\r\n//       setErrorMessage('Please select check-in and check-out dates.');\r\n//       setTimeout(() => setErrorMessage(''), 5000); // Clear error message after 5 seconds\r\n//       return;\r\n//     }\r\n\r\n//     // Check if number of adults and children are valid\r\n//     if (isNaN(numAdults) || numAdults < 1 || isNaN(numChildren) || numChildren < 0) {\r\n//       setErrorMessage('Please enter valid numbers for adults and children.');\r\n//       setTimeout(() => setErrorMessage(''), 5000); // Clear error message after 5 seconds\r\n//       return;\r\n//     }\r\n\r\n//     // Calculate total number of days\r\n//     const oneDay = 24 * 60 * 60 * 1000; // hours * minutes * seconds * milliseconds\r\n//     const startDate = new Date(checkInDate);\r\n//     const endDate = new Date(checkOutDate);\r\n//     const totalDays = Math.round(Math.abs((endDate - startDate) / oneDay)) + 1;\r\n\r\n//     // Calculate total number of guests\r\n//     const totalGuests = numAdults + numChildren;\r\n\r\n//     // Calculate total price\r\n//     const roomPricePerNight = roomDetails.roomPrice;\r\n//     const totalPrice = roomPricePerNight * totalDays;\r\n\r\n//     setTotalPrice(totalPrice);\r\n//     setTotalGuests(totalGuests);\r\n//   };\r\n\r\n//   const acceptBooking = async () => {\r\n//     try {\r\n\r\n//       // Ensure checkInDate and checkOutDate are Date objects\r\n//       const startDate = new Date(checkInDate);\r\n//       const endDate = new Date(checkOutDate);\r\n\r\n//       // Log the original dates for debugging\r\n//       console.log(\"Original Check-in Date:\", startDate);\r\n//       console.log(\"Original Check-out Date:\", endDate);\r\n\r\n//       // Convert dates to YYYY-MM-DD format, adjusting for time zone differences\r\n//       const formattedCheckInDate = new Date(startDate.getTime() - (startDate.getTimezoneOffset() * 60000)).toISOString().split('T')[0];\r\n//       const formattedCheckOutDate = new Date(endDate.getTime() - (endDate.getTimezoneOffset() * 60000)).toISOString().split('T')[0];\r\n\r\n\r\n//       // Log the original dates for debugging\r\n//       console.log(\"Formated Check-in Date:\", formattedCheckInDate);\r\n//       console.log(\"Formated Check-out Date:\", formattedCheckOutDate);\r\n\r\n//       // Create booking object\r\n//       const booking = {\r\n//         checkInDate: formattedCheckInDate,\r\n//         checkOutDate: formattedCheckOutDate,\r\n//         numOfAdults: numAdults,\r\n//         numOfChildren: numChildren\r\n//       };\r\n//       console.log(booking)\r\n//       console.log(checkOutDate)\r\n\r\n//       // Make booking\r\n//       const response = await ApiService.bookRoom(roomId, userId, booking);\r\n//       if (response.statusCode === 200) {\r\n//         setConfirmationCode(response.bookingConfirmationCode); // Set booking confirmation code\r\n//         setShowMessage(true); // Show message\r\n//         // Hide message and navigate to homepage after 5 seconds\r\n//         setTimeout(() => {\r\n//           setShowMessage(false);\r\n//           navigate('/rooms'); // Navigate to rooms\r\n//         }, 10000);\r\n//       }\r\n//     } catch (error) {\r\n//       setErrorMessage(error.response?.data?.message || error.message);\r\n//       setTimeout(() => setErrorMessage(''), 5000); // Clear error message after 5 seconds\r\n//     }\r\n//   };\r\n\r\n//   if (isLoading) {\r\n//     return <p className='room-detail-loading'>Loading room details...</p>;\r\n//   }\r\n\r\n//   if (error) {\r\n//     return <p className='room-detail-loading'>{error}</p>;\r\n//   }\r\n\r\n//   if (!roomDetails) {\r\n//     return <p className='room-detail-loading'>Room not found.</p>;\r\n//   }\r\n\r\n//   const { roomType, roomPrice, roomPhoto, description, bookings } = roomDetails;\r\n\r\n//   return (\r\n//     <div className=\"room-details-booking\">\r\n//       {showMessage && (\r\n//         <p className=\"booking-success-message\">\r\n//           Booking successful! Confirmation code: {confirmationCode}. An SMS and email of your booking details have been sent to you.\r\n//         </p>\r\n//       )}\r\n//       {errorMessage && (\r\n//         <p className=\"error-message\">\r\n//           {errorMessage}\r\n//         </p>\r\n//       )}\r\n//       <h2>Room Details</h2>\r\n//       <br />\r\n//       {roomPhoto&& (\r\n//                             <img\r\n//                                 src={`data:image/jpeg;base64,${roomPhoto}`}\r\n//                                 alt={roomType}\r\n//                                 style={{ width: '200px', height: '150px' }}\r\n//                             />\r\n//                         )}\r\n//       <div className=\"room-details-info\">\r\n//         <h3>{roomType}</h3>\r\n//         <p>Price: â‚¹{roomPrice}</p>\r\n//         <p>{description}</p>\r\n//       </div>\r\n//       Booking list \r\n//       {/* {bookings && bookings.length > 0 && (\r\n//         <div>\r\n//           <h3>Existing Booking Details</h3>\r\n//           <ul className=\"booking-list\">\r\n//             {bookings.map((booking, index) => (\r\n//               <li key={booking.id} className=\"booking-item\">\r\n//                 <span className=\"booking-number\">Booking {index + 1} </span>\r\n//                 <span className=\"booking-text\">Check-in: {booking.checkInDate} </span>\r\n//                 <span className=\"booking-text\">Out: {booking.checkOutDate}</span>\r\n//               </li>\r\n//             ))}\r\n//           </ul>\r\n//         </div>\r\n//       )} */}\r\n//       <div className=\"booking-info\">\r\n//         <button className=\"book-now-button\" onClick={() => setShowDatePicker(true)}>Book Now</button>\r\n//         <button className=\"go-back-button\" onClick={() => setShowDatePicker(false)}>Go Back</button>\r\n//         {showDatePicker && (\r\n//           <div className=\"date-picker-container\">\r\n//             <DatePicker\r\n//               className=\"detail-search-field\"\r\n//               selected={checkInDate}\r\n//               onChange={(date) => setCheckInDate(date)}\r\n//               selectsStart\r\n//               startDate={checkInDate}\r\n//               endDate={checkOutDate}\r\n//               placeholderText=\"Check-in Date\"\r\n//               dateFormat=\"dd/MM/yyyy\"\r\n//               // dateFormat=\"yyyy-MM-dd\"\r\n//             />\r\n//             <DatePicker\r\n//               className=\"detail-search-field\"\r\n//               selected={checkOutDate}\r\n//               onChange={(date) => setCheckOutDate(date)}\r\n//               selectsEnd\r\n//               startDate={checkInDate}\r\n//               endDate={checkOutDate}\r\n//               minDate={checkInDate}\r\n              \r\n//               placeholderText=\"Check-out Date\"\r\n//               // dateFormat=\"yyyy-MM-dd\"\r\n//               dateFormat=\"dd/MM/yyyy\"\r\n              \r\n//             />\r\n\r\n//             <div className='guest-container'>\r\n//               <div className=\"guest-div\">\r\n//                 <label>Adults:</label>\r\n//                 <input\r\n//                   type=\"number\"\r\n//                   min=\"1\"\r\n//                   value={numAdults}\r\n//                   onChange={(e) => setNumAdults(parseInt(e.target.value))}\r\n//                 />\r\n//               </div>\r\n//               <div className=\"guest-div\">\r\n//                 <label>Children:</label>\r\n//                 <input\r\n//                   type=\"number\"\r\n//                   min=\"0\"\r\n//                   value={numChildren}\r\n//                   onChange={(e) => setNumChildren(parseInt(e.target.value))}\r\n//                 />\r\n//               </div>\r\n//               <button className=\"confirm-booking\" onClick={handleConfirmBooking}>Confirm Booking</button>\r\n//             </div>\r\n//           </div>\r\n//         )}\r\n//         {totalPrice > 0 && (\r\n//           <div className=\"total-price\">\r\n//             <p>Total Price: â‚¹{totalPrice}</p>\r\n//             <p>Total Guests: {totalGuests}</p>\r\n//             <button onClick={acceptBooking} className=\"accept-booking\">Accept Booking</button>\r\n//           </div>\r\n//         )}\r\n//       </div>\r\n//     </div>\r\n//   );\r\n// };\r\n\r\n// export default RoomDetailsPage;\r\n\r\n\r\n\r\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAGA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}