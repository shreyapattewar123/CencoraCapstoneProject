{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\A145499\\\\OneDrive - AmerisourceBergen(ABC)\\\\Desktop\\\\Capstone_Project\\\\CencoraCapstoneProject\\\\Frontend\\\\src\\\\component\\\\booking_rooms\\\\RoomDetailsPage.jsx\",\n  _s = $RefreshSig$();\n// import React, { useState, useEffect } from 'react';\n// import { useParams, useNavigate } from 'react-router-dom';\n// import ApiService from '../../service/ApiService'; // Assuming your service is in a file called ApiService.js\n// import DatePicker from 'react-datepicker';\n// // import 'react-datepicker/dist/react-datepicker.css';\n\n// const RoomDetailsPage = () => {\n//   const navigate = useNavigate(); // Access the navigate function to navigate\n//   const { roomId } = useParams(); // Get room ID from URL parameters\n//   const [roomDetails, setRoomDetails] = useState(null);\n//   const [isLoading, setIsLoading] = useState(true); // Track loading state\n//   const [error, setError] = useState(null); // Track any errors\n//   const [checkInDate, setCheckInDate] = useState(null); // State variable for check-in date\n//   const [checkOutDate, setCheckOutDate] = useState(null); // State variable for check-out date\n//   const [numAdults, setNumAdults] = useState(1); // State variable for number of adults\n//   const [numChildren, setNumChildren] = useState(0); // State variable for number of children\n//   const [totalPrice, setTotalPrice] = useState(0); // State variable for total booking price\n//   const [totalGuests, setTotalGuests] = useState(1); // State variable for total number of guests\n//   const [showDatePicker, setShowDatePicker] = useState(false); // State variable to control date picker visibility\n//   const [userId, setUserId] = useState(''); // Set user id\n//   const [showMessage, setShowMessage] = useState(false); // State variable to control message visibility\n//   const [confirmationCode, setConfirmationCode] = useState(''); // State variable for booking confirmation code\n//   const [errorMessage, setErrorMessage] = useState(''); // State variable for error message\n\n//   useEffect(() => {\n//     const fetchData = async () => {\n//       try {\n//         setIsLoading(true); // Set loading state to true\n//         const response = await ApiService.getRoomById(roomId);\n//         setRoomDetails(response.room);\n//         const userProfile = await ApiService.getUserProfile();\n//         setUserId(userProfile.user.id);\n\n//       } catch (error) {\n//         setError(error.response?.data?.message || error.message);\n//       } finally {\n//         setIsLoading(false); // Set loading state to false after fetching or error\n//       }\n//     };\n//     fetchData();\n//   }, [roomId]); // Re-run effect when roomId changes\n\n//   const handleConfirmBooking = async () => {\n//     // Check if check-in and check-out dates are selected\n//     if (!checkInDate || !checkOutDate) {\n//       setErrorMessage('Please select check-in and check-out dates.');\n//       setTimeout(() => setErrorMessage(''), 5000); // Clear error message after 5 seconds\n//       return;\n//     }\n\n//     // Check if number of adults and children are valid\n//     if (isNaN(numAdults) || numAdults < 1 || isNaN(numChildren) || numChildren < 0) {\n//       setErrorMessage('Please enter valid numbers for adults and children.');\n//       setTimeout(() => setErrorMessage(''), 5000); // Clear error message after 5 seconds\n//       return;\n//     }\n\n//     // Calculate total number of days\n//     const oneDay = 24 * 60 * 60 * 1000; // hours * minutes * seconds * milliseconds\n//     const startDate = new Date(checkInDate);\n//     const endDate = new Date(checkOutDate);\n//     const totalDays = Math.round(Math.abs((endDate - startDate) / oneDay)) + 1;\n\n//     // Calculate total number of guests\n//     const totalGuests = numAdults + numChildren;\n\n//     // Calculate total price\n//     const roomPricePerNight = roomDetails.roomPrice;\n//     const totalPrice = roomPricePerNight * totalDays;\n\n//     setTotalPrice(totalPrice);\n//     setTotalGuests(totalGuests);\n//   };\n\n//   const acceptBooking = async () => {\n//     try {\n\n//       // Ensure checkInDate and checkOutDate are Date objects\n//       const startDate = new Date(checkInDate);\n//       const endDate = new Date(checkOutDate);\n\n//       // Log the original dates for debugging\n//       console.log(\"Original Check-in Date:\", startDate);\n//       console.log(\"Original Check-out Date:\", endDate);\n\n//       // Convert dates to YYYY-MM-DD format, adjusting for time zone differences\n//       const formattedCheckInDate = new Date(startDate.getTime() - (startDate.getTimezoneOffset() * 60000)).toISOString().split('T')[0];\n//       const formattedCheckOutDate = new Date(endDate.getTime() - (endDate.getTimezoneOffset() * 60000)).toISOString().split('T')[0];\n\n//       // Log the original dates for debugging\n//       console.log(\"Formated Check-in Date:\", formattedCheckInDate);\n//       console.log(\"Formated Check-out Date:\", formattedCheckOutDate);\n\n//       // Create booking object\n//       const booking = {\n//         checkInDate: formattedCheckInDate,\n//         checkOutDate: formattedCheckOutDate,\n//         numOfAdults: numAdults,\n//         numOfChildren: numChildren\n//       };\n//       console.log(booking)\n//       console.log(checkOutDate)\n\n//       // Make booking\n//       const response = await ApiService.bookRoom(roomId, userId, booking);\n//       if (response.statusCode === 200) {\n//         setConfirmationCode(response.bookingConfirmationCode); // Set booking confirmation code\n//         setShowMessage(true); // Show message\n//         // Hide message and navigate to homepage after 5 seconds\n//         setTimeout(() => {\n//           setShowMessage(false);\n//           navigate('/rooms'); // Navigate to rooms\n//         }, 10000);\n//       }\n//     } catch (error) {\n//       setErrorMessage(error.response?.data?.message || error.message);\n//       setTimeout(() => setErrorMessage(''), 5000); // Clear error message after 5 seconds\n//     }\n//   };\n\n//   if (isLoading) {\n//     return <p className='room-detail-loading'>Loading room details...</p>;\n//   }\n\n//   if (error) {\n//     return <p className='room-detail-loading'>{error}</p>;\n//   }\n\n//   if (!roomDetails) {\n//     return <p className='room-detail-loading'>Room not found.</p>;\n//   }\n\n//   const { roomType, roomPrice, roomPhoto, description, bookings } = roomDetails;\n\n//   return (\n//     <div className=\"room-details-booking\">\n//       {showMessage && (\n//         <p className=\"booking-success-message\">\n//           Booking successful! Confirmation code: {confirmationCode}. An SMS and email of your booking details have been sent to you.\n//         </p>\n//       )}\n//       {errorMessage && (\n//         <p className=\"error-message\">\n//           {errorMessage}\n//         </p>\n//       )}\n//       <h2>Room Details</h2>\n//       <br />\n//       {roomPhoto&& (\n//                             <img\n//                                 src={`data:image/jpeg;base64,${roomPhoto}`}\n//                                 alt={roomType}\n//                                 style={{ width: '200px', height: '150px' }}\n//                             />\n//                         )}\n//       <div className=\"room-details-info\">\n//         <h3>{roomType}</h3>\n//         <p>Price: â‚¹{roomPrice}</p>\n//         <p>{description}</p>\n//       </div>\n//       Booking list \n//       {/* {bookings && bookings.length > 0 && (\n//         <div>\n//           <h3>Existing Booking Details</h3>\n//           <ul className=\"booking-list\">\n//             {bookings.map((booking, index) => (\n//               <li key={booking.id} className=\"booking-item\">\n//                 <span className=\"booking-number\">Booking {index + 1} </span>\n//                 <span className=\"booking-text\">Check-in: {booking.checkInDate} </span>\n//                 <span className=\"booking-text\">Out: {booking.checkOutDate}</span>\n//               </li>\n//             ))}\n//           </ul>\n//         </div>\n//       )} */}\n//       <div className=\"booking-info\">\n//         <button className=\"book-now-button\" onClick={() => setShowDatePicker(true)}>Book Now</button>\n//         <button className=\"go-back-button\" onClick={() => setShowDatePicker(false)}>Go Back</button>\n//         {showDatePicker && (\n//           <div className=\"date-picker-container\">\n//             <DatePicker\n//               className=\"detail-search-field\"\n//               selected={checkInDate}\n//               onChange={(date) => setCheckInDate(date)}\n//               selectsStart\n//               startDate={checkInDate}\n//               endDate={checkOutDate}\n//               placeholderText=\"Check-in Date\"\n//               dateFormat=\"dd/MM/yyyy\"\n//               // dateFormat=\"yyyy-MM-dd\"\n//             />\n//             <DatePicker\n//               className=\"detail-search-field\"\n//               selected={checkOutDate}\n//               onChange={(date) => setCheckOutDate(date)}\n//               selectsEnd\n//               startDate={checkInDate}\n//               endDate={checkOutDate}\n//               minDate={checkInDate}\n\n//               placeholderText=\"Check-out Date\"\n//               // dateFormat=\"yyyy-MM-dd\"\n//               dateFormat=\"dd/MM/yyyy\"\n\n//             />\n\n//             <div className='guest-container'>\n//               <div className=\"guest-div\">\n//                 <label>Adults:</label>\n//                 <input\n//                   type=\"number\"\n//                   min=\"1\"\n//                   value={numAdults}\n//                   onChange={(e) => setNumAdults(parseInt(e.target.value))}\n//                 />\n//               </div>\n//               <div className=\"guest-div\">\n//                 <label>Children:</label>\n//                 <input\n//                   type=\"number\"\n//                   min=\"0\"\n//                   value={numChildren}\n//                   onChange={(e) => setNumChildren(parseInt(e.target.value))}\n//                 />\n//               </div>\n//               <button className=\"confirm-booking\" onClick={handleConfirmBooking}>Confirm Booking</button>\n//             </div>\n//           </div>\n//         )}\n//         {totalPrice > 0 && (\n//           <div className=\"total-price\">\n//             <p>Total Price: â‚¹{totalPrice}</p>\n//             <p>Total Guests: {totalGuests}</p>\n//             <button onClick={acceptBooking} className=\"accept-booking\">Accept Booking</button>\n//           </div>\n//         )}\n//       </div>\n//     </div>\n//   );\n// };\n\n// export default RoomDetailsPage;\n\nimport React, { useState, useEffect } from 'react';\nimport { useParams, useNavigate } from 'react-router-dom';\nimport ApiService from '../../service/ApiService';\nimport DatePicker from 'react-datepicker';\n// import 'react-datepicker/dist/react-datepicker.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst RoomDetailsPage = () => {\n  _s();\n  const navigate = useNavigate(); // Access the navigate function to navigate\n  const {\n    roomId\n  } = useParams(); // Get room ID from URL parameters\n  const [roomDetails, setRoomDetails] = useState(null);\n  const [isLoading, setIsLoading] = useState(true); // Track loading state\n  const [error, setError] = useState(null); // Track any errors\n  const [checkInDate, setCheckInDate] = useState(new Date(localStorage.getItem('checkInDate')) || null); // State variable for check-in date\n  const [checkOutDate, setCheckOutDate] = useState(new Date(localStorage.getItem('checkOutDate')) || null); // State variable for check-out date\n  const [numAdults, setNumAdults] = useState(1); // State variable for number of adults\n  const [numChildren, setNumChildren] = useState(0); // State variable for number of children\n  const [totalPrice, setTotalPrice] = useState(0); // State variable for total booking price\n  const [totalGuests, setTotalGuests] = useState(1); // State variable for total number of guests\n  const [showDatePicker, setShowDatePicker] = useState(false); // State variable to control date picker visibility\n  const [userId, setUserId] = useState(''); // Set user id\n  const [showMessage, setShowMessage] = useState(false); // State variable to control message visibility\n  const [confirmationCode, setConfirmationCode] = useState(''); // State variable for booking confirmation code\n  const [errorMessage, setErrorMessage] = useState(''); // State variable for error message\n\n  useEffect(() => {\n    const fetchData = async () => {\n      try {\n        setIsLoading(true); // Set loading state to true\n        const response = await ApiService.getRoomById(roomId);\n        setRoomDetails(response.room);\n        const userProfile = await ApiService.getUserProfile();\n        setUserId(userProfile.user.id);\n      } catch (error) {\n        var _error$response, _error$response$data;\n        setError(((_error$response = error.response) === null || _error$response === void 0 ? void 0 : (_error$response$data = _error$response.data) === null || _error$response$data === void 0 ? void 0 : _error$response$data.message) || error.message);\n      } finally {\n        setIsLoading(false); // Set loading state to false after fetching or error\n      }\n    };\n    fetchData();\n  }, [roomId]); // Re-run effect when roomId changes\n\n  const handleConfirmBooking = async () => {\n    // Check if check-in and check-out dates are selected\n    if (!checkInDate || !checkOutDate) {\n      setErrorMessage('Please select check-in and check-out dates.');\n      setTimeout(() => setErrorMessage(''), 5000); // Clear error message after 5 seconds\n      return;\n    }\n\n    // Check if number of adults and children are valid\n    if (isNaN(numAdults) || numAdults < 1 || isNaN(numChildren) || numChildren < 0) {\n      setErrorMessage('Please enter valid numbers for adults and children.');\n      setTimeout(() => setErrorMessage(''), 5000); // Clear error message after 5 seconds\n      return;\n    }\n\n    // Calculate total number of days\n    const oneDay = 24 * 60 * 60 * 1000; // hours * minutes * seconds * milliseconds\n    const startDate = new Date(checkInDate);\n    const endDate = new Date(checkOutDate);\n    const totalDays = Math.round(Math.abs((endDate - startDate) / oneDay)) + 1;\n\n    // Calculate total number of guests\n    const totalGuests = numAdults + numChildren;\n\n    // Calculate total price\n    const roomPricePerNight = roomDetails.roomPrice;\n    const totalPrice = roomPricePerNight * totalDays;\n    setTotalPrice(totalPrice);\n    setTotalGuests(totalGuests);\n  };\n  const acceptBooking = async () => {\n    try {\n      // Ensure checkInDate and checkOutDate are Date objects\n      const startDate = new Date(checkInDate);\n      const endDate = new Date(checkOutDate);\n\n      // Log the original dates for debugging\n      console.log(\"Original Check-in Date:\", startDate);\n      console.log(\"Original Check-out Date:\", endDate);\n\n      // Convert dates to YYYY-MM-DD format, adjusting for time zone differences\n      const formattedCheckInDate = new Date(startDate.getTime() - startDate.getTimezoneOffset() * 60000).toISOString().split('T')[0];\n      const formattedCheckOutDate = new Date(endDate.getTime() - endDate.getTimezoneOffset() * 60000).toISOString().split('T')[0];\n\n      // Log the original dates for debugging\n      console.log(\"Formated Check-in Date:\", formattedCheckInDate);\n      console.log(\"Formated Check-out Date:\", formattedCheckOutDate);\n\n      // Create booking object\n      const booking = {\n        checkInDate: formattedCheckInDate,\n        checkOutDate: formattedCheckOutDate,\n        numOfAdults: numAdults,\n        numOfChildren: numChildren\n      };\n      console.log(booking);\n      console.log(checkOutDate);\n\n      // Make booking\n      const response = await ApiService.bookRoom(roomId, userId, booking);\n      if (response.statusCode === 200) {\n        setConfirmationCode(response.bookingConfirmationCode); // Set booking confirmation code\n        setShowMessage(true); // Show message\n        // Hide message and navigate to homepage after 5 seconds\n        setTimeout(() => {\n          setShowMessage(false);\n          navigate('/rooms'); // Navigate to rooms\n        }, 10000);\n      }\n    } catch (error) {\n      var _error$response2, _error$response2$data;\n      setErrorMessage(((_error$response2 = error.response) === null || _error$response2 === void 0 ? void 0 : (_error$response2$data = _error$response2.data) === null || _error$response2$data === void 0 ? void 0 : _error$response2$data.message) || error.message);\n      setTimeout(() => setErrorMessage(''), 5000); // Clear error message after 5 seconds\n    }\n  };\n  if (isLoading) {\n    return /*#__PURE__*/_jsxDEV(\"p\", {\n      className: \"room-detail-loading\",\n      children: \"Loading room details...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 370,\n      columnNumber: 16\n    }, this);\n  }\n  if (error) {\n    return /*#__PURE__*/_jsxDEV(\"p\", {\n      className: \"room-detail-loading\",\n      children: error\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 374,\n      columnNumber: 16\n    }, this);\n  }\n  if (!roomDetails) {\n    return /*#__PURE__*/_jsxDEV(\"p\", {\n      className: \"room-detail-loading\",\n      children: \"Room not found.\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 378,\n      columnNumber: 16\n    }, this);\n  }\n  const {\n    roomType,\n    roomPrice,\n    roomPhoto,\n    description,\n    bookings\n  } = roomDetails;\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"room-details-booking\",\n    children: [showMessage && /*#__PURE__*/_jsxDEV(\"p\", {\n      className: \"booking-success-message\",\n      children: [\"Booking successful! Confirmation code: \", confirmationCode, \". An SMS and email of your booking details have been sent to you.\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 386,\n      columnNumber: 17\n    }, this), errorMessage && /*#__PURE__*/_jsxDEV(\"p\", {\n      className: \"error-message\",\n      children: errorMessage\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 391,\n      columnNumber: 17\n    }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Room Details\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 395,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 396,\n      columnNumber: 13\n    }, this), roomPhoto && /*#__PURE__*/_jsxDEV(\"img\", {\n      src: `data:image/jpeg;base64,${roomPhoto}`,\n      alt: roomType,\n      style: {\n        width: '200px',\n        height: '150px'\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 398,\n      columnNumber: 17\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"room-details-info\",\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: roomType\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 405,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Price: \\u20B9\", roomPrice]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 406,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: description\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 407,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 404,\n      columnNumber: 13\n    }, this), \"Booking list\", /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"booking-info\",\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"book-now-button\",\n        onClick: () => setShowDatePicker(true),\n        children: \"Book Now\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 425,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"go-back-button\",\n        onClick: () => setShowDatePicker(false),\n        children: \"Go Back\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 426,\n        columnNumber: 17\n      }, this), showDatePicker && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"date-picker-container\",\n        children: [/*#__PURE__*/_jsxDEV(DatePicker, {\n          className: \"detail-search-field\",\n          selected: checkInDate,\n          onChange: date => setCheckInDate(date),\n          selectsStart: true,\n          startDate: checkInDate,\n          endDate: checkOutDate,\n          placeholderText: \"Check-in Date\",\n          dateFormat: \"dd/MM/yyyy\"\n          // dateFormat=\"yyyy-MM-dd\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 429,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(DatePicker, {\n          className: \"detail-search-field\",\n          selected: checkOutDate,\n          onChange: date => setCheckOutDate(date),\n          selectsEnd: true,\n          startDate: checkInDate,\n          endDate: checkOutDate,\n          minDate: checkInDate,\n          placeholderText: \"Check-out Date\"\n          // dateFormat=\"yyyy-MM-dd\"\n          ,\n          dateFormat: \"dd/MM/yyyy\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 440,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"guest-container\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"guest-div\",\n            children: [/*#__PURE__*/_jsxDEV(\"label\", {\n              children: \"Adults:\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 457,\n              columnNumber: 33\n            }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"number\",\n              min: \"1\",\n              value: numAdults,\n              onChange: e => setNumAdults(parseInt(e.target.value))\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 458,\n              columnNumber: 33\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 456,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"guest-div\",\n            children: [/*#__PURE__*/_jsxDEV(\"label\", {\n              children: \"Children:\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 466,\n              columnNumber: 33\n            }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"number\",\n              min: \"0\",\n              value: numChildren,\n              onChange: e => setNumChildren(parseInt(e.target.value))\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 467,\n              columnNumber: 33\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 465,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"confirm-booking\",\n            onClick: handleConfirmBooking,\n            children: \"Confirm Booking\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 474,\n            columnNumber: 29\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 455,\n          columnNumber: 25\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 428,\n        columnNumber: 21\n      }, this), totalPrice > 0 && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"total-price\",\n        children: [/*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\"Total Price: \\u20B9\", totalPrice]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 480,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\"Total Guests: \", totalGuests]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 481,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: acceptBooking,\n          className: \"accept-booking\",\n          children: \"Accept Booking\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 482,\n          columnNumber: 25\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 479,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 424,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 384,\n    columnNumber: 9\n  }, this);\n};\n_s(RoomDetailsPage, \"tlSPPOIkWeXL0y3XKmbEjxEarJg=\", false, function () {\n  return [useNavigate, useParams];\n});\n_c = RoomDetailsPage;\nexport default RoomDetailsPage;\nvar _c;\n$RefreshReg$(_c, \"RoomDetailsPage\");","map":{"version":3,"names":["React","useState","useEffect","useParams","useNavigate","ApiService","DatePicker","jsxDEV","_jsxDEV","RoomDetailsPage","_s","navigate","roomId","roomDetails","setRoomDetails","isLoading","setIsLoading","error","setError","checkInDate","setCheckInDate","Date","localStorage","getItem","checkOutDate","setCheckOutDate","numAdults","setNumAdults","numChildren","setNumChildren","totalPrice","setTotalPrice","totalGuests","setTotalGuests","showDatePicker","setShowDatePicker","userId","setUserId","showMessage","setShowMessage","confirmationCode","setConfirmationCode","errorMessage","setErrorMessage","fetchData","response","getRoomById","room","userProfile","getUserProfile","user","id","_error$response","_error$response$data","data","message","handleConfirmBooking","setTimeout","isNaN","oneDay","startDate","endDate","totalDays","Math","round","abs","roomPricePerNight","roomPrice","acceptBooking","console","log","formattedCheckInDate","getTime","getTimezoneOffset","toISOString","split","formattedCheckOutDate","booking","numOfAdults","numOfChildren","bookRoom","statusCode","bookingConfirmationCode","_error$response2","_error$response2$data","className","children","fileName","_jsxFileName","lineNumber","columnNumber","roomType","roomPhoto","description","bookings","src","alt","style","width","height","onClick","selected","onChange","date","selectsStart","placeholderText","dateFormat","selectsEnd","minDate","type","min","value","e","parseInt","target","_c","$RefreshReg$"],"sources":["C:/Users/A145499/OneDrive - AmerisourceBergen(ABC)/Desktop/Capstone_Project/CencoraCapstoneProject/Frontend/src/component/booking_rooms/RoomDetailsPage.jsx"],"sourcesContent":["// import React, { useState, useEffect } from 'react';\r\n// import { useParams, useNavigate } from 'react-router-dom';\r\n// import ApiService from '../../service/ApiService'; // Assuming your service is in a file called ApiService.js\r\n// import DatePicker from 'react-datepicker';\r\n// // import 'react-datepicker/dist/react-datepicker.css';\r\n\r\n// const RoomDetailsPage = () => {\r\n//   const navigate = useNavigate(); // Access the navigate function to navigate\r\n//   const { roomId } = useParams(); // Get room ID from URL parameters\r\n//   const [roomDetails, setRoomDetails] = useState(null);\r\n//   const [isLoading, setIsLoading] = useState(true); // Track loading state\r\n//   const [error, setError] = useState(null); // Track any errors\r\n//   const [checkInDate, setCheckInDate] = useState(null); // State variable for check-in date\r\n//   const [checkOutDate, setCheckOutDate] = useState(null); // State variable for check-out date\r\n//   const [numAdults, setNumAdults] = useState(1); // State variable for number of adults\r\n//   const [numChildren, setNumChildren] = useState(0); // State variable for number of children\r\n//   const [totalPrice, setTotalPrice] = useState(0); // State variable for total booking price\r\n//   const [totalGuests, setTotalGuests] = useState(1); // State variable for total number of guests\r\n//   const [showDatePicker, setShowDatePicker] = useState(false); // State variable to control date picker visibility\r\n//   const [userId, setUserId] = useState(''); // Set user id\r\n//   const [showMessage, setShowMessage] = useState(false); // State variable to control message visibility\r\n//   const [confirmationCode, setConfirmationCode] = useState(''); // State variable for booking confirmation code\r\n//   const [errorMessage, setErrorMessage] = useState(''); // State variable for error message\r\n\r\n//   useEffect(() => {\r\n//     const fetchData = async () => {\r\n//       try {\r\n//         setIsLoading(true); // Set loading state to true\r\n//         const response = await ApiService.getRoomById(roomId);\r\n//         setRoomDetails(response.room);\r\n//         const userProfile = await ApiService.getUserProfile();\r\n//         setUserId(userProfile.user.id);\r\n        \r\n//       } catch (error) {\r\n//         setError(error.response?.data?.message || error.message);\r\n//       } finally {\r\n//         setIsLoading(false); // Set loading state to false after fetching or error\r\n//       }\r\n//     };\r\n//     fetchData();\r\n//   }, [roomId]); // Re-run effect when roomId changes\r\n\r\n\r\n//   const handleConfirmBooking = async () => {\r\n//     // Check if check-in and check-out dates are selected\r\n//     if (!checkInDate || !checkOutDate) {\r\n//       setErrorMessage('Please select check-in and check-out dates.');\r\n//       setTimeout(() => setErrorMessage(''), 5000); // Clear error message after 5 seconds\r\n//       return;\r\n//     }\r\n\r\n//     // Check if number of adults and children are valid\r\n//     if (isNaN(numAdults) || numAdults < 1 || isNaN(numChildren) || numChildren < 0) {\r\n//       setErrorMessage('Please enter valid numbers for adults and children.');\r\n//       setTimeout(() => setErrorMessage(''), 5000); // Clear error message after 5 seconds\r\n//       return;\r\n//     }\r\n\r\n//     // Calculate total number of days\r\n//     const oneDay = 24 * 60 * 60 * 1000; // hours * minutes * seconds * milliseconds\r\n//     const startDate = new Date(checkInDate);\r\n//     const endDate = new Date(checkOutDate);\r\n//     const totalDays = Math.round(Math.abs((endDate - startDate) / oneDay)) + 1;\r\n\r\n//     // Calculate total number of guests\r\n//     const totalGuests = numAdults + numChildren;\r\n\r\n//     // Calculate total price\r\n//     const roomPricePerNight = roomDetails.roomPrice;\r\n//     const totalPrice = roomPricePerNight * totalDays;\r\n\r\n//     setTotalPrice(totalPrice);\r\n//     setTotalGuests(totalGuests);\r\n//   };\r\n\r\n//   const acceptBooking = async () => {\r\n//     try {\r\n\r\n//       // Ensure checkInDate and checkOutDate are Date objects\r\n//       const startDate = new Date(checkInDate);\r\n//       const endDate = new Date(checkOutDate);\r\n\r\n//       // Log the original dates for debugging\r\n//       console.log(\"Original Check-in Date:\", startDate);\r\n//       console.log(\"Original Check-out Date:\", endDate);\r\n\r\n//       // Convert dates to YYYY-MM-DD format, adjusting for time zone differences\r\n//       const formattedCheckInDate = new Date(startDate.getTime() - (startDate.getTimezoneOffset() * 60000)).toISOString().split('T')[0];\r\n//       const formattedCheckOutDate = new Date(endDate.getTime() - (endDate.getTimezoneOffset() * 60000)).toISOString().split('T')[0];\r\n\r\n\r\n//       // Log the original dates for debugging\r\n//       console.log(\"Formated Check-in Date:\", formattedCheckInDate);\r\n//       console.log(\"Formated Check-out Date:\", formattedCheckOutDate);\r\n\r\n//       // Create booking object\r\n//       const booking = {\r\n//         checkInDate: formattedCheckInDate,\r\n//         checkOutDate: formattedCheckOutDate,\r\n//         numOfAdults: numAdults,\r\n//         numOfChildren: numChildren\r\n//       };\r\n//       console.log(booking)\r\n//       console.log(checkOutDate)\r\n\r\n//       // Make booking\r\n//       const response = await ApiService.bookRoom(roomId, userId, booking);\r\n//       if (response.statusCode === 200) {\r\n//         setConfirmationCode(response.bookingConfirmationCode); // Set booking confirmation code\r\n//         setShowMessage(true); // Show message\r\n//         // Hide message and navigate to homepage after 5 seconds\r\n//         setTimeout(() => {\r\n//           setShowMessage(false);\r\n//           navigate('/rooms'); // Navigate to rooms\r\n//         }, 10000);\r\n//       }\r\n//     } catch (error) {\r\n//       setErrorMessage(error.response?.data?.message || error.message);\r\n//       setTimeout(() => setErrorMessage(''), 5000); // Clear error message after 5 seconds\r\n//     }\r\n//   };\r\n\r\n//   if (isLoading) {\r\n//     return <p className='room-detail-loading'>Loading room details...</p>;\r\n//   }\r\n\r\n//   if (error) {\r\n//     return <p className='room-detail-loading'>{error}</p>;\r\n//   }\r\n\r\n//   if (!roomDetails) {\r\n//     return <p className='room-detail-loading'>Room not found.</p>;\r\n//   }\r\n\r\n//   const { roomType, roomPrice, roomPhoto, description, bookings } = roomDetails;\r\n\r\n//   return (\r\n//     <div className=\"room-details-booking\">\r\n//       {showMessage && (\r\n//         <p className=\"booking-success-message\">\r\n//           Booking successful! Confirmation code: {confirmationCode}. An SMS and email of your booking details have been sent to you.\r\n//         </p>\r\n//       )}\r\n//       {errorMessage && (\r\n//         <p className=\"error-message\">\r\n//           {errorMessage}\r\n//         </p>\r\n//       )}\r\n//       <h2>Room Details</h2>\r\n//       <br />\r\n//       {roomPhoto&& (\r\n//                             <img\r\n//                                 src={`data:image/jpeg;base64,${roomPhoto}`}\r\n//                                 alt={roomType}\r\n//                                 style={{ width: '200px', height: '150px' }}\r\n//                             />\r\n//                         )}\r\n//       <div className=\"room-details-info\">\r\n//         <h3>{roomType}</h3>\r\n//         <p>Price: â‚¹{roomPrice}</p>\r\n//         <p>{description}</p>\r\n//       </div>\r\n//       Booking list \r\n//       {/* {bookings && bookings.length > 0 && (\r\n//         <div>\r\n//           <h3>Existing Booking Details</h3>\r\n//           <ul className=\"booking-list\">\r\n//             {bookings.map((booking, index) => (\r\n//               <li key={booking.id} className=\"booking-item\">\r\n//                 <span className=\"booking-number\">Booking {index + 1} </span>\r\n//                 <span className=\"booking-text\">Check-in: {booking.checkInDate} </span>\r\n//                 <span className=\"booking-text\">Out: {booking.checkOutDate}</span>\r\n//               </li>\r\n//             ))}\r\n//           </ul>\r\n//         </div>\r\n//       )} */}\r\n//       <div className=\"booking-info\">\r\n//         <button className=\"book-now-button\" onClick={() => setShowDatePicker(true)}>Book Now</button>\r\n//         <button className=\"go-back-button\" onClick={() => setShowDatePicker(false)}>Go Back</button>\r\n//         {showDatePicker && (\r\n//           <div className=\"date-picker-container\">\r\n//             <DatePicker\r\n//               className=\"detail-search-field\"\r\n//               selected={checkInDate}\r\n//               onChange={(date) => setCheckInDate(date)}\r\n//               selectsStart\r\n//               startDate={checkInDate}\r\n//               endDate={checkOutDate}\r\n//               placeholderText=\"Check-in Date\"\r\n//               dateFormat=\"dd/MM/yyyy\"\r\n//               // dateFormat=\"yyyy-MM-dd\"\r\n//             />\r\n//             <DatePicker\r\n//               className=\"detail-search-field\"\r\n//               selected={checkOutDate}\r\n//               onChange={(date) => setCheckOutDate(date)}\r\n//               selectsEnd\r\n//               startDate={checkInDate}\r\n//               endDate={checkOutDate}\r\n//               minDate={checkInDate}\r\n              \r\n//               placeholderText=\"Check-out Date\"\r\n//               // dateFormat=\"yyyy-MM-dd\"\r\n//               dateFormat=\"dd/MM/yyyy\"\r\n              \r\n//             />\r\n\r\n//             <div className='guest-container'>\r\n//               <div className=\"guest-div\">\r\n//                 <label>Adults:</label>\r\n//                 <input\r\n//                   type=\"number\"\r\n//                   min=\"1\"\r\n//                   value={numAdults}\r\n//                   onChange={(e) => setNumAdults(parseInt(e.target.value))}\r\n//                 />\r\n//               </div>\r\n//               <div className=\"guest-div\">\r\n//                 <label>Children:</label>\r\n//                 <input\r\n//                   type=\"number\"\r\n//                   min=\"0\"\r\n//                   value={numChildren}\r\n//                   onChange={(e) => setNumChildren(parseInt(e.target.value))}\r\n//                 />\r\n//               </div>\r\n//               <button className=\"confirm-booking\" onClick={handleConfirmBooking}>Confirm Booking</button>\r\n//             </div>\r\n//           </div>\r\n//         )}\r\n//         {totalPrice > 0 && (\r\n//           <div className=\"total-price\">\r\n//             <p>Total Price: â‚¹{totalPrice}</p>\r\n//             <p>Total Guests: {totalGuests}</p>\r\n//             <button onClick={acceptBooking} className=\"accept-booking\">Accept Booking</button>\r\n//           </div>\r\n//         )}\r\n//       </div>\r\n//     </div>\r\n//   );\r\n// };\r\n\r\n// export default RoomDetailsPage;\r\n\r\n\r\nimport React, { useState, useEffect } from 'react';\r\nimport { useParams, useNavigate } from 'react-router-dom';\r\nimport ApiService from '../../service/ApiService'; \r\nimport DatePicker from 'react-datepicker';\r\n// import 'react-datepicker/dist/react-datepicker.css';\r\n\r\nconst RoomDetailsPage = () => {\r\n    const navigate = useNavigate(); // Access the navigate function to navigate\r\n    const { roomId } = useParams(); // Get room ID from URL parameters\r\n    const [roomDetails, setRoomDetails] = useState(null);\r\n    const [isLoading, setIsLoading] = useState(true); // Track loading state\r\n    const [error, setError] = useState(null); // Track any errors\r\n    const [checkInDate, setCheckInDate] = useState(new Date(localStorage.getItem('checkInDate')) || null); // State variable for check-in date\r\n    const [checkOutDate, setCheckOutDate] = useState(new Date(localStorage.getItem('checkOutDate')) || null); // State variable for check-out date\r\n    const [numAdults, setNumAdults] = useState(1); // State variable for number of adults\r\n    const [numChildren, setNumChildren] = useState(0); // State variable for number of children\r\n    const [totalPrice, setTotalPrice] = useState(0); // State variable for total booking price\r\n    const [totalGuests, setTotalGuests] = useState(1); // State variable for total number of guests\r\n    const [showDatePicker, setShowDatePicker] = useState(false); // State variable to control date picker visibility\r\n    const [userId, setUserId] = useState(''); // Set user id\r\n    const [showMessage, setShowMessage] = useState(false); // State variable to control message visibility\r\n    const [confirmationCode, setConfirmationCode] = useState(''); // State variable for booking confirmation code\r\n    const [errorMessage, setErrorMessage] = useState(''); // State variable for error message\r\n\r\n    useEffect(() => {\r\n        const fetchData = async () => {\r\n            try {\r\n                setIsLoading(true); // Set loading state to true\r\n                const response = await ApiService.getRoomById(roomId);\r\n                setRoomDetails(response.room);\r\n                const userProfile = await ApiService.getUserProfile();\r\n                setUserId(userProfile.user.id);\r\n\r\n            } catch (error) {\r\n                setError(error.response?.data?.message || error.message);\r\n            } finally {\r\n                setIsLoading(false); // Set loading state to false after fetching or error\r\n            }\r\n        };\r\n        fetchData();\r\n    }, [roomId]); // Re-run effect when roomId changes\r\n\r\n\r\n    const handleConfirmBooking = async () => {\r\n        // Check if check-in and check-out dates are selected\r\n        if (!checkInDate || !checkOutDate) {\r\n            setErrorMessage('Please select check-in and check-out dates.');\r\n            setTimeout(() => setErrorMessage(''), 5000); // Clear error message after 5 seconds\r\n            return;\r\n        }\r\n\r\n        // Check if number of adults and children are valid\r\n        if (isNaN(numAdults) || numAdults < 1 || isNaN(numChildren) || numChildren < 0) {\r\n            setErrorMessage('Please enter valid numbers for adults and children.');\r\n            setTimeout(() => setErrorMessage(''), 5000); // Clear error message after 5 seconds\r\n            return;\r\n        }\r\n\r\n        // Calculate total number of days\r\n        const oneDay = 24 * 60 * 60 * 1000; // hours * minutes * seconds * milliseconds\r\n        const startDate = new Date(checkInDate);\r\n        const endDate = new Date(checkOutDate);\r\n        const totalDays = Math.round(Math.abs((endDate - startDate) / oneDay)) + 1;\r\n\r\n        // Calculate total number of guests\r\n        const totalGuests = numAdults + numChildren;\r\n\r\n        // Calculate total price\r\n        const roomPricePerNight = roomDetails.roomPrice;\r\n        const totalPrice = roomPricePerNight * totalDays;\r\n\r\n        setTotalPrice(totalPrice);\r\n        setTotalGuests(totalGuests);\r\n    };\r\n\r\n    const acceptBooking = async () => {\r\n        try {\r\n\r\n            // Ensure checkInDate and checkOutDate are Date objects\r\n            const startDate = new Date(checkInDate);\r\n            const endDate = new Date(checkOutDate);\r\n\r\n            // Log the original dates for debugging\r\n            console.log(\"Original Check-in Date:\", startDate);\r\n            console.log(\"Original Check-out Date:\", endDate);\r\n\r\n            // Convert dates to YYYY-MM-DD format, adjusting for time zone differences\r\n            const formattedCheckInDate = new Date(startDate.getTime() - (startDate.getTimezoneOffset() * 60000)).toISOString().split('T')[0];\r\n            const formattedCheckOutDate = new Date(endDate.getTime() - (endDate.getTimezoneOffset() * 60000)).toISOString().split('T')[0];\r\n\r\n\r\n            // Log the original dates for debugging\r\n            console.log(\"Formated Check-in Date:\", formattedCheckInDate);\r\n            console.log(\"Formated Check-out Date:\", formattedCheckOutDate);\r\n\r\n            // Create booking object\r\n            const booking = {\r\n                checkInDate: formattedCheckInDate,\r\n                checkOutDate: formattedCheckOutDate,\r\n                numOfAdults: numAdults,\r\n                numOfChildren: numChildren\r\n            };\r\n            console.log(booking)\r\n            console.log(checkOutDate)\r\n\r\n            // Make booking\r\n            const response = await ApiService.bookRoom(roomId, userId, booking);\r\n            if (response.statusCode === 200) {\r\n                setConfirmationCode(response.bookingConfirmationCode); // Set booking confirmation code\r\n                setShowMessage(true); // Show message\r\n                // Hide message and navigate to homepage after 5 seconds\r\n                setTimeout(() => {\r\n                    setShowMessage(false);\r\n                    navigate('/rooms'); // Navigate to rooms\r\n                }, 10000);\r\n            }\r\n        } catch (error) {\r\n            setErrorMessage(error.response?.data?.message || error.message);\r\n            setTimeout(() => setErrorMessage(''), 5000); // Clear error message after 5 seconds\r\n        }\r\n    };\r\n\r\n    if (isLoading) {\r\n        return <p className='room-detail-loading'>Loading room details...</p>;\r\n    }\r\n\r\n    if (error) {\r\n        return <p className='room-detail-loading'>{error}</p>;\r\n    }\r\n\r\n    if (!roomDetails) {\r\n        return <p className='room-detail-loading'>Room not found.</p>;\r\n    }\r\n\r\n    const { roomType, roomPrice, roomPhoto, description, bookings } = roomDetails;\r\n\r\n    return (\r\n        <div className=\"room-details-booking\">\r\n            {showMessage && (\r\n                <p className=\"booking-success-message\">\r\n                    Booking successful! Confirmation code: {confirmationCode}. An SMS and email of your booking details have been sent to you.\r\n                </p>\r\n            )}\r\n            {errorMessage && (\r\n                <p className=\"error-message\">\r\n                    {errorMessage}\r\n                </p>\r\n            )}\r\n            <h2>Room Details</h2>\r\n            <br />\r\n            {roomPhoto && (\r\n                <img\r\n                    src={`data:image/jpeg;base64,${roomPhoto}`}\r\n                    alt={roomType}\r\n                    style={{ width: '200px', height: '150px' }}\r\n                />\r\n            )}\r\n            <div className=\"room-details-info\">\r\n                <h3>{roomType}</h3>\r\n                <p>Price: â‚¹{roomPrice}</p>\r\n                <p>{description}</p>\r\n            </div>\r\n            Booking list\r\n            {/* {bookings && bookings.length > 0 && (\r\n                <div>\r\n                    <h3>Existing Booking Details</h3>\r\n                    <ul className=\"booking-list\">\r\n                        {bookings.map((booking, index) => (\r\n                            <li key={booking.id} className=\"booking-item\">\r\n                                <span className=\"booking-number\">Booking {index + 1} </span>\r\n                                <span className=\"booking-text\">Check-in: {booking.checkInDate} </span>\r\n                                <span className=\"booking-text\">Out: {booking.checkOutDate}</span>\r\n                            </li>\r\n                        ))}\r\n                    </ul>\r\n                </div>\r\n            )} */}\r\n            <div className=\"booking-info\">\r\n                <button className=\"book-now-button\" onClick={() => setShowDatePicker(true)}>Book Now</button>\r\n                <button className=\"go-back-button\" onClick={() => setShowDatePicker(false)}>Go Back</button>\r\n                {showDatePicker && (\r\n                    <div className=\"date-picker-container\">\r\n                        <DatePicker\r\n                            className=\"detail-search-field\"\r\n                            selected={checkInDate}\r\n                            onChange={(date) => setCheckInDate(date)}\r\n                            selectsStart\r\n                            startDate={checkInDate}\r\n                            endDate={checkOutDate}\r\n                            placeholderText=\"Check-in Date\"\r\n                            dateFormat=\"dd/MM/yyyy\"\r\n                        // dateFormat=\"yyyy-MM-dd\"\r\n                        />\r\n                        <DatePicker\r\n                            className=\"detail-search-field\"\r\n                            selected={checkOutDate}\r\n                            onChange={(date) => setCheckOutDate(date)}\r\n                            selectsEnd\r\n                            startDate={checkInDate}\r\n                            endDate={checkOutDate}\r\n                            minDate={checkInDate}\r\n\r\n                            placeholderText=\"Check-out Date\"\r\n                            // dateFormat=\"yyyy-MM-dd\"\r\n                            dateFormat=\"dd/MM/yyyy\"\r\n\r\n                        />\r\n\r\n                        <div className='guest-container'>\r\n                            <div className=\"guest-div\">\r\n                                <label>Adults:</label>\r\n                                <input\r\n                                    type=\"number\"\r\n                                    min=\"1\"\r\n                                    value={numAdults}\r\n                                    onChange={(e) => setNumAdults(parseInt(e.target.value))}\r\n                                />\r\n                            </div>\r\n                            <div className=\"guest-div\">\r\n                                <label>Children:</label>\r\n                                <input\r\n                                    type=\"number\"\r\n                                    min=\"0\"\r\n                                    value={numChildren}\r\n                                    onChange={(e) => setNumChildren(parseInt(e.target.value))}\r\n                                />\r\n                            </div>\r\n                            <button className=\"confirm-booking\" onClick={handleConfirmBooking}>Confirm Booking</button>\r\n                        </div>\r\n                    </div>\r\n                )}\r\n                {totalPrice > 0 && (\r\n                    <div className=\"total-price\">\r\n                        <p>Total Price: â‚¹{totalPrice}</p>\r\n                        <p>Total Guests: {totalGuests}</p>\r\n                        <button onClick={acceptBooking} className=\"accept-booking\">Accept Booking</button>\r\n                    </div>\r\n                )}\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default RoomDetailsPage;\r\n"],"mappings":";;AAAA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAGA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAGA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,SAASC,SAAS,EAAEC,WAAW,QAAQ,kBAAkB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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}