{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\A145499\\\\OneDrive - AmerisourceBergen(ABC)\\\\Desktop\\\\Capstone_Project\\\\CencoraCapstoneProject\\\\Frontend\\\\src\\\\component\\\\booking_rooms\\\\RoomDetailsPage.jsx\",\n  _s = $RefreshSig$();\n// import React, { useState, useEffect } from 'react';\n// import { useParams, useNavigate } from 'react-router-dom';\n// import ApiService from '../../service/ApiService'; // Assuming your service is in a file called ApiService.js\n// import DatePicker from 'react-datepicker';\n// // import 'react-datepicker/dist/react-datepicker.css';\n\n// const RoomDetailsPage = () => {\n//   const navigate = useNavigate(); // Access the navigate function to navigate\n//   const { roomId } = useParams(); // Get room ID from URL parameters\n//   const [roomDetails, setRoomDetails] = useState(null);\n//   const [isLoading, setIsLoading] = useState(true); // Track loading state\n//   const [error, setError] = useState(null); // Track any errors\n//   const [checkInDate, setCheckInDate] = useState(null); // State variable for check-in date\n//   const [checkOutDate, setCheckOutDate] = useState(null); // State variable for check-out date\n//   const [numAdults, setNumAdults] = useState(1); // State variable for number of adults\n//   const [numChildren, setNumChildren] = useState(0); // State variable for number of children\n//   const [totalPrice, setTotalPrice] = useState(0); // State variable for total booking price\n//   const [totalGuests, setTotalGuests] = useState(1); // State variable for total number of guests\n//   const [showDatePicker, setShowDatePicker] = useState(false); // State variable to control date picker visibility\n//   const [userId, setUserId] = useState(''); // Set user id\n//   const [showMessage, setShowMessage] = useState(false); // State variable to control message visibility\n//   const [confirmationCode, setConfirmationCode] = useState(''); // State variable for booking confirmation code\n//   const [errorMessage, setErrorMessage] = useState(''); // State variable for error message\n\n//   useEffect(() => {\n//     const fetchData = async () => {\n//       try {\n//         setIsLoading(true); // Set loading state to true\n//         const response = await ApiService.getRoomById(roomId);\n//         setRoomDetails(response.room);\n//         const userProfile = await ApiService.getUserProfile();\n//         setUserId(userProfile.user.id);\n\n//       } catch (error) {\n//         setError(error.response?.data?.message || error.message);\n//       } finally {\n//         setIsLoading(false); // Set loading state to false after fetching or error\n//       }\n//     };\n//     fetchData();\n//   }, [roomId]); // Re-run effect when roomId changes\n\n//   const handleConfirmBooking = async () => {\n//     // Check if check-in and check-out dates are selected\n//     if (!checkInDate || !checkOutDate) {\n//       setErrorMessage('Please select check-in and check-out dates.');\n//       setTimeout(() => setErrorMessage(''), 5000); // Clear error message after 5 seconds\n//       return;\n//     }\n\n//     // Check if number of adults and children are valid\n//     if (isNaN(numAdults) || numAdults < 1 || isNaN(numChildren) || numChildren < 0) {\n//       setErrorMessage('Please enter valid numbers for adults and children.');\n//       setTimeout(() => setErrorMessage(''), 5000); // Clear error message after 5 seconds\n//       return;\n//     }\n\n//     // Calculate total number of days\n//     const oneDay = 24 * 60 * 60 * 1000; // hours * minutes * seconds * milliseconds\n//     const startDate = new Date(checkInDate);\n//     const endDate = new Date(checkOutDate);\n//     const totalDays = Math.round(Math.abs((endDate - startDate) / oneDay)) + 1;\n\n//     // Calculate total number of guests\n//     const totalGuests = numAdults + numChildren;\n\n//     // Calculate total price\n//     const roomPricePerNight = roomDetails.roomPrice;\n//     const totalPrice = roomPricePerNight * totalDays;\n\n//     setTotalPrice(totalPrice);\n//     setTotalGuests(totalGuests);\n//   };\n\n//   const acceptBooking = async () => {\n//     try {\n\n//       // Ensure checkInDate and checkOutDate are Date objects\n//       const startDate = new Date(checkInDate);\n//       const endDate = new Date(checkOutDate);\n\n//       // Log the original dates for debugging\n//       console.log(\"Original Check-in Date:\", startDate);\n//       console.log(\"Original Check-out Date:\", endDate);\n\n//       // Convert dates to YYYY-MM-DD format, adjusting for time zone differences\n//       const formattedCheckInDate = new Date(startDate.getTime() - (startDate.getTimezoneOffset() * 60000)).toISOString().split('T')[0];\n//       const formattedCheckOutDate = new Date(endDate.getTime() - (endDate.getTimezoneOffset() * 60000)).toISOString().split('T')[0];\n\n//       // Log the original dates for debugging\n//       console.log(\"Formated Check-in Date:\", formattedCheckInDate);\n//       console.log(\"Formated Check-out Date:\", formattedCheckOutDate);\n\n//       // Create booking object\n//       const booking = {\n//         checkInDate: formattedCheckInDate,\n//         checkOutDate: formattedCheckOutDate,\n//         numOfAdults: numAdults,\n//         numOfChildren: numChildren\n//       };\n//       console.log(booking)\n//       console.log(checkOutDate)\n\n//       // Make booking\n//       const response = await ApiService.bookRoom(roomId, userId, booking);\n//       if (response.statusCode === 200) {\n//         setConfirmationCode(response.bookingConfirmationCode); // Set booking confirmation code\n//         setShowMessage(true); // Show message\n//         // Hide message and navigate to homepage after 5 seconds\n//         setTimeout(() => {\n//           setShowMessage(false);\n//           navigate('/rooms'); // Navigate to rooms\n//         }, 10000);\n//       }\n//     } catch (error) {\n//       setErrorMessage(error.response?.data?.message || error.message);\n//       setTimeout(() => setErrorMessage(''), 5000); // Clear error message after 5 seconds\n//     }\n//   };\n\n//   if (isLoading) {\n//     return <p className='room-detail-loading'>Loading room details...</p>;\n//   }\n\n//   if (error) {\n//     return <p className='room-detail-loading'>{error}</p>;\n//   }\n\n//   if (!roomDetails) {\n//     return <p className='room-detail-loading'>Room not found.</p>;\n//   }\n\n//   const { roomType, roomPrice, roomPhoto, description, bookings } = roomDetails;\n\n//   return (\n//     <div className=\"room-details-booking\">\n//       {showMessage && (\n//         <p className=\"booking-success-message\">\n//           Booking successful! Confirmation code: {confirmationCode}. An SMS and email of your booking details have been sent to you.\n//         </p>\n//       )}\n//       {errorMessage && (\n//         <p className=\"error-message\">\n//           {errorMessage}\n//         </p>\n//       )}\n//       <h2>Room Details</h2>\n//       <br />\n//       {roomPhoto&& (\n//                             <img\n//                                 src={`data:image/jpeg;base64,${roomPhoto}`}\n//                                 alt={roomType}\n//                                 style={{ width: '200px', height: '150px' }}\n//                             />\n//                         )}\n//       <div className=\"room-details-info\">\n//         <h3>{roomType}</h3>\n//         <p>Price: â‚¹{roomPrice}</p>\n//         <p>{description}</p>\n//       </div>\n//       {bookings && bookings.length > 0 && (\n//         <div>\n//           <h3>Existing Booking Details</h3>\n//           <ul className=\"booking-list\">\n//             {bookings.map((booking, index) => (\n//               <li key={booking.id} className=\"booking-item\">\n//                 <span className=\"booking-number\">Booking {index + 1} </span>\n//                 <span className=\"booking-text\">Check-in: {booking.checkInDate} </span>\n//                 <span className=\"booking-text\">Out: {booking.checkOutDate}</span>\n//               </li>\n//             ))}\n//           </ul>\n//         </div>\n//       )}\n//       <div className=\"booking-info\">\n//         <button className=\"book-now-button\" onClick={() => setShowDatePicker(true)}>Book Now</button>\n//         <button className=\"go-back-button\" onClick={() => setShowDatePicker(false)}>Go Back</button>\n//         {showDatePicker && (\n//           <div className=\"date-picker-container\">\n//             <DatePicker\n//               className=\"detail-search-field\"\n//               selected={checkInDate}\n//               onChange={(date) => setCheckInDate(date)}\n//               selectsStart\n//               startDate={checkInDate}\n//               endDate={checkOutDate}\n//               placeholderText=\"Check-in Date\"\n//               dateFormat=\"dd/MM/yyyy\"\n//               // dateFormat=\"yyyy-MM-dd\"\n//             />\n//             <DatePicker\n//               className=\"detail-search-field\"\n//               selected={checkOutDate}\n//               onChange={(date) => setCheckOutDate(date)}\n//               selectsEnd\n//               startDate={checkInDate}\n//               endDate={checkOutDate}\n//               minDate={checkInDate}\n//               placeholderText=\"Check-out Date\"\n//               // dateFormat=\"yyyy-MM-dd\"\n//               dateFormat=\"dd/MM/yyyy\"\n//             />\n\n//             <div className='guest-container'>\n//               <div className=\"guest-div\">\n//                 <label>Adults:</label>\n//                 <input\n//                   type=\"number\"\n//                   min=\"1\"\n//                   value={numAdults}\n//                   onChange={(e) => setNumAdults(parseInt(e.target.value))}\n//                 />\n//               </div>\n//               <div className=\"guest-div\">\n//                 <label>Children:</label>\n//                 <input\n//                   type=\"number\"\n//                   min=\"0\"\n//                   value={numChildren}\n//                   onChange={(e) => setNumChildren(parseInt(e.target.value))}\n//                 />\n//               </div>\n//               <button className=\"confirm-booking\" onClick={handleConfirmBooking}>Confirm Booking</button>\n//             </div>\n//           </div>\n//         )}\n//         {totalPrice > 0 && (\n//           <div className=\"total-price\">\n//             <p>Total Price: â‚¹{totalPrice}</p>\n//             <p>Total Guests: {totalGuests}</p>\n//             <button onClick={acceptBooking} className=\"accept-booking\">Accept Booking</button>\n//           </div>\n//         )}\n//       </div>\n//     </div>\n//   );\n// };\n\n// export default RoomDetailsPage;\n\n// new code\n\nimport React, { useState, useEffect } from 'react';\nimport { useParams, useLocation, useNavigate } from 'react-router-dom';\nimport ApiService from '../../service/ApiService';\nimport DatePicker from 'react-datepicker';\nimport 'react-datepicker/dist/react-datepicker.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst RoomDetailsPage = () => {\n  _s();\n  const navigate = useNavigate();\n  const {\n    roomId\n  } = useParams();\n  const location = useLocation();\n  const {\n    startDate: initialCheckInDate,\n    endDate: initialCheckOutDate\n  } = location.state || {};\n  const [roomDetails, setRoomDetails] = useState(null);\n  const [isLoading, setIsLoading] = useState(true);\n  const [error, setError] = useState(null);\n  const [checkInDate, setCheckInDate] = useState(initialCheckInDate ? new Date(initialCheckInDate) : new Date());\n  const [checkOutDate, setCheckOutDate] = useState(initialCheckOutDate ? new Date(initialCheckOutDate) : new Date());\n  const [numAdults, setNumAdults] = useState(1);\n  const [numChildren, setNumChildren] = useState(0);\n  const [totalPrice, setTotalPrice] = useState(0);\n  const [totalGuests, setTotalGuests] = useState(1);\n  const [showDatePicker, setShowDatePicker] = useState(false);\n  const [userId, setUserId] = useState('');\n  const [showMessage, setShowMessage] = useState(false);\n  const [confirmationCode, setConfirmationCode] = useState('');\n  const [errorMessage, setErrorMessage] = useState('');\n  useEffect(() => {\n    const fetchData = async () => {\n      try {\n        setIsLoading(true);\n        const response = await ApiService.getRoomById(roomId);\n        setRoomDetails(response.room);\n        const userProfile = await ApiService.getUserProfile();\n        setUserId(userProfile.user.id);\n      } catch (error) {\n        var _error$response, _error$response$data;\n        setError(((_error$response = error.response) === null || _error$response === void 0 ? void 0 : (_error$response$data = _error$response.data) === null || _error$response$data === void 0 ? void 0 : _error$response$data.message) || error.message);\n      } finally {\n        setIsLoading(false);\n      }\n    };\n    fetchData();\n  }, [roomId]);\n  const handleConfirmBooking = () => {\n    if (!checkInDate || !checkOutDate) {\n      setErrorMessage('Please select check-in and check-out dates.');\n      setTimeout(() => setErrorMessage(''), 5000);\n      return;\n    }\n    if (isNaN(numAdults) || numAdults < 1 || isNaN(numChildren) || numChildren < 0) {\n      setErrorMessage('Please enter valid numbers for adults and children.');\n      setTimeout(() => setErrorMessage(''), 5000);\n      return;\n    }\n    const oneDay = 24 * 60 * 60 * 1000;\n    const totalDays = Math.round(Math.abs((checkOutDate - checkInDate) / oneDay)) + 1;\n    const totalGuests = numAdults + numChildren;\n    const totalPrice = roomDetails.roomPrice * totalDays;\n    setTotalPrice(totalPrice);\n    setTotalGuests(totalGuests);\n  };\n  const acceptBooking = async () => {\n    try {\n      const formattedCheckInDate = new Date(checkInDate.getTime() - checkInDate.getTimezoneOffset() * 60000).toISOString().split('T')[0];\n      const formattedCheckOutDate = new Date(checkOutDate.getTime() - checkOutDate.getTimezoneOffset() * 60000).toISOString().split('T')[0];\n      const booking = {\n        checkInDate: formattedCheckInDate,\n        checkOutDate: formattedCheckOutDate,\n        numOfAdults: numAdults,\n        numOfChildren: numChildren\n      };\n      const response = await ApiService.bookRoom(roomId, userId, booking);\n      if (response.statusCode === 200) {\n        setConfirmationCode(response.bookingConfirmationCode);\n        setShowMessage(true);\n        setTimeout(() => {\n          setShowMessage(false);\n          navigate('/rooms');\n        }, 10000);\n      }\n    } catch (error) {\n      var _error$response2, _error$response2$data;\n      setErrorMessage(((_error$response2 = error.response) === null || _error$response2 === void 0 ? void 0 : (_error$response2$data = _error$response2.data) === null || _error$response2$data === void 0 ? void 0 : _error$response2$data.message) || error.message);\n      setTimeout(() => setErrorMessage(''), 5000);\n    }\n  };\n  if (isLoading) {\n    return /*#__PURE__*/_jsxDEV(\"p\", {\n      className: \"room-detail-loading\",\n      children: \"Loading room details...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 339,\n      columnNumber: 12\n    }, this);\n  }\n  if (error) {\n    return /*#__PURE__*/_jsxDEV(\"p\", {\n      className: \"room-detail-loading\",\n      children: error\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 343,\n      columnNumber: 12\n    }, this);\n  }\n  if (!roomDetails) {\n    return /*#__PURE__*/_jsxDEV(\"p\", {\n      className: \"room-detail-loading\",\n      children: \"Room not found.\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 347,\n      columnNumber: 12\n    }, this);\n  }\n  const {\n    roomType,\n    roomPrice,\n    roomPhoto,\n    description,\n    bookings\n  } = roomDetails;\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"room-details-booking\",\n    children: [showMessage && /*#__PURE__*/_jsxDEV(\"p\", {\n      className: \"booking-success-message\",\n      children: [\"Booking successful! Confirmation code: \", confirmationCode, \". An SMS and email of your booking details have been sent to you.\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 355,\n      columnNumber: 9\n    }, this), errorMessage && /*#__PURE__*/_jsxDEV(\"p\", {\n      className: \"error-message\",\n      children: errorMessage\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 360,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Room Details\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 364,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 365,\n      columnNumber: 7\n    }, this), roomPhoto && /*#__PURE__*/_jsxDEV(\"img\", {\n      src: `data:image/jpeg;base64,${roomPhoto}`,\n      alt: roomType,\n      style: {\n        width: '200px',\n        height: '150px'\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 367,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"room-details-info\",\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: roomType\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 374,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Price: \\u20B9\", roomPrice]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 375,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: description\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 376,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 373,\n      columnNumber: 7\n    }, this), bookings && bookings.length > 0 && /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"Existing Booking Details\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 380,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n        className: \"booking-list\",\n        children: bookings.map((booking, index) => /*#__PURE__*/_jsxDEV(\"li\", {\n          className: \"booking-item\",\n          children: [/*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"booking-number\",\n            children: [\"Booking \", index + 1, \" \"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 384,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"booking-text\",\n            children: [\"Check-in: \", booking.checkInDate, \" \"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 385,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"booking-text\",\n            children: [\"Out: \", booking.checkOutDate]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 386,\n            columnNumber: 17\n          }, this)]\n        }, booking.id, true, {\n          fileName: _jsxFileName,\n          lineNumber: 383,\n          columnNumber: 15\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 381,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 379,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"booking-info\",\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"book-now-button\",\n        onClick: () => setShowDatePicker(true),\n        children: \"Book Now\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 393,\n        columnNumber: 9\n      }, this), showDatePicker && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"date-picker-container\",\n        children: [/*#__PURE__*/_jsxDEV(DatePicker, {\n          className: \"detail-search-field\",\n          selected: checkInDate,\n          onChange: date => setCheckInDate(date),\n          selectsStart: true,\n          startDate: checkInDate,\n          endDate: checkOutDate,\n          placeholderText: \"Check-in Date\",\n          dateFormat: \"dd/MM/yyyy\",\n          minDate: new Date()\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 396,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(DatePicker, {\n          className: \"detail-search-field\",\n          selected: checkOutDate,\n          onChange: date => setCheckOutDate(date),\n          selectsEnd: true,\n          startDate: checkInDate,\n          endDate: checkOutDate,\n          minDate: checkInDate,\n          placeholderText: \"Check-out Date\",\n          dateFormat: \"dd/MM/yyyy\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 407,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"guest-container\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"guest-div\",\n            children: [/*#__PURE__*/_jsxDEV(\"label\", {\n              children: \"Adults:\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 420,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"number\",\n              min: \"1\",\n              value: numAdults,\n              onChange: e => setNumAdults(parseInt(e.target.value))\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 421,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 419,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"guest-div\",\n            children: [/*#__PURE__*/_jsxDEV(\"label\", {\n              children: \"Children:\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 429,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"number\",\n              min: \"0\",\n              value: numChildren,\n              onChange: e => setNumChildren(parseInt(e.target.value))\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 430,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 428,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"confirm-booking\",\n            onClick: handleConfirmBooking,\n            children: \"Confirm Booking\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 437,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 418,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 395,\n        columnNumber: 11\n      }, this), totalPrice > 0 && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"total-price\",\n        children: [/*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\"Total Price: \\u20B9\", totalPrice]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 443,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\"Total Guests: \", totalGuests]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 444,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: acceptBooking,\n          className: \"accept-booking\",\n          children: \"Accept Booking\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 445,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 442,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"go-back-button\",\n        onClick: () => navigate('/rooms'),\n        children: \"Go Back\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 448,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 392,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 353,\n    columnNumber: 5\n  }, this);\n};\n_s(RoomDetailsPage, \"RESn7osDb+P8txQB//l8LmbQRrE=\", false, function () {\n  return [useNavigate, useParams, useLocation];\n});\n_c = RoomDetailsPage;\nexport default RoomDetailsPage;\nvar _c;\n$RefreshReg$(_c, \"RoomDetailsPage\");","map":{"version":3,"names":["React","useState","useEffect","useParams","useLocation","useNavigate","ApiService","DatePicker","jsxDEV","_jsxDEV","RoomDetailsPage","_s","navigate","roomId","location","startDate","initialCheckInDate","endDate","initialCheckOutDate","state","roomDetails","setRoomDetails","isLoading","setIsLoading","error","setError","checkInDate","setCheckInDate","Date","checkOutDate","setCheckOutDate","numAdults","setNumAdults","numChildren","setNumChildren","totalPrice","setTotalPrice","totalGuests","setTotalGuests","showDatePicker","setShowDatePicker","userId","setUserId","showMessage","setShowMessage","confirmationCode","setConfirmationCode","errorMessage","setErrorMessage","fetchData","response","getRoomById","room","userProfile","getUserProfile","user","id","_error$response","_error$response$data","data","message","handleConfirmBooking","setTimeout","isNaN","oneDay","totalDays","Math","round","abs","roomPrice","acceptBooking","formattedCheckInDate","getTime","getTimezoneOffset","toISOString","split","formattedCheckOutDate","booking","numOfAdults","numOfChildren","bookRoom","statusCode","bookingConfirmationCode","_error$response2","_error$response2$data","className","children","fileName","_jsxFileName","lineNumber","columnNumber","roomType","roomPhoto","description","bookings","src","alt","style","width","height","length","map","index","onClick","selected","onChange","date","selectsStart","placeholderText","dateFormat","minDate","selectsEnd","type","min","value","e","parseInt","target","_c","$RefreshReg$"],"sources":["C:/Users/A145499/OneDrive - AmerisourceBergen(ABC)/Desktop/Capstone_Project/CencoraCapstoneProject/Frontend/src/component/booking_rooms/RoomDetailsPage.jsx"],"sourcesContent":["// import React, { useState, useEffect } from 'react';\r\n// import { useParams, useNavigate } from 'react-router-dom';\r\n// import ApiService from '../../service/ApiService'; // Assuming your service is in a file called ApiService.js\r\n// import DatePicker from 'react-datepicker';\r\n// // import 'react-datepicker/dist/react-datepicker.css';\r\n\r\n// const RoomDetailsPage = () => {\r\n//   const navigate = useNavigate(); // Access the navigate function to navigate\r\n//   const { roomId } = useParams(); // Get room ID from URL parameters\r\n//   const [roomDetails, setRoomDetails] = useState(null);\r\n//   const [isLoading, setIsLoading] = useState(true); // Track loading state\r\n//   const [error, setError] = useState(null); // Track any errors\r\n//   const [checkInDate, setCheckInDate] = useState(null); // State variable for check-in date\r\n//   const [checkOutDate, setCheckOutDate] = useState(null); // State variable for check-out date\r\n//   const [numAdults, setNumAdults] = useState(1); // State variable for number of adults\r\n//   const [numChildren, setNumChildren] = useState(0); // State variable for number of children\r\n//   const [totalPrice, setTotalPrice] = useState(0); // State variable for total booking price\r\n//   const [totalGuests, setTotalGuests] = useState(1); // State variable for total number of guests\r\n//   const [showDatePicker, setShowDatePicker] = useState(false); // State variable to control date picker visibility\r\n//   const [userId, setUserId] = useState(''); // Set user id\r\n//   const [showMessage, setShowMessage] = useState(false); // State variable to control message visibility\r\n//   const [confirmationCode, setConfirmationCode] = useState(''); // State variable for booking confirmation code\r\n//   const [errorMessage, setErrorMessage] = useState(''); // State variable for error message\r\n\r\n//   useEffect(() => {\r\n//     const fetchData = async () => {\r\n//       try {\r\n//         setIsLoading(true); // Set loading state to true\r\n//         const response = await ApiService.getRoomById(roomId);\r\n//         setRoomDetails(response.room);\r\n//         const userProfile = await ApiService.getUserProfile();\r\n//         setUserId(userProfile.user.id);\r\n        \r\n//       } catch (error) {\r\n//         setError(error.response?.data?.message || error.message);\r\n//       } finally {\r\n//         setIsLoading(false); // Set loading state to false after fetching or error\r\n//       }\r\n//     };\r\n//     fetchData();\r\n//   }, [roomId]); // Re-run effect when roomId changes\r\n\r\n\r\n//   const handleConfirmBooking = async () => {\r\n//     // Check if check-in and check-out dates are selected\r\n//     if (!checkInDate || !checkOutDate) {\r\n//       setErrorMessage('Please select check-in and check-out dates.');\r\n//       setTimeout(() => setErrorMessage(''), 5000); // Clear error message after 5 seconds\r\n//       return;\r\n//     }\r\n\r\n//     // Check if number of adults and children are valid\r\n//     if (isNaN(numAdults) || numAdults < 1 || isNaN(numChildren) || numChildren < 0) {\r\n//       setErrorMessage('Please enter valid numbers for adults and children.');\r\n//       setTimeout(() => setErrorMessage(''), 5000); // Clear error message after 5 seconds\r\n//       return;\r\n//     }\r\n\r\n//     // Calculate total number of days\r\n//     const oneDay = 24 * 60 * 60 * 1000; // hours * minutes * seconds * milliseconds\r\n//     const startDate = new Date(checkInDate);\r\n//     const endDate = new Date(checkOutDate);\r\n//     const totalDays = Math.round(Math.abs((endDate - startDate) / oneDay)) + 1;\r\n\r\n//     // Calculate total number of guests\r\n//     const totalGuests = numAdults + numChildren;\r\n\r\n//     // Calculate total price\r\n//     const roomPricePerNight = roomDetails.roomPrice;\r\n//     const totalPrice = roomPricePerNight * totalDays;\r\n\r\n//     setTotalPrice(totalPrice);\r\n//     setTotalGuests(totalGuests);\r\n//   };\r\n\r\n//   const acceptBooking = async () => {\r\n//     try {\r\n\r\n//       // Ensure checkInDate and checkOutDate are Date objects\r\n//       const startDate = new Date(checkInDate);\r\n//       const endDate = new Date(checkOutDate);\r\n\r\n//       // Log the original dates for debugging\r\n//       console.log(\"Original Check-in Date:\", startDate);\r\n//       console.log(\"Original Check-out Date:\", endDate);\r\n\r\n//       // Convert dates to YYYY-MM-DD format, adjusting for time zone differences\r\n//       const formattedCheckInDate = new Date(startDate.getTime() - (startDate.getTimezoneOffset() * 60000)).toISOString().split('T')[0];\r\n//       const formattedCheckOutDate = new Date(endDate.getTime() - (endDate.getTimezoneOffset() * 60000)).toISOString().split('T')[0];\r\n\r\n\r\n//       // Log the original dates for debugging\r\n//       console.log(\"Formated Check-in Date:\", formattedCheckInDate);\r\n//       console.log(\"Formated Check-out Date:\", formattedCheckOutDate);\r\n\r\n//       // Create booking object\r\n//       const booking = {\r\n//         checkInDate: formattedCheckInDate,\r\n//         checkOutDate: formattedCheckOutDate,\r\n//         numOfAdults: numAdults,\r\n//         numOfChildren: numChildren\r\n//       };\r\n//       console.log(booking)\r\n//       console.log(checkOutDate)\r\n\r\n//       // Make booking\r\n//       const response = await ApiService.bookRoom(roomId, userId, booking);\r\n//       if (response.statusCode === 200) {\r\n//         setConfirmationCode(response.bookingConfirmationCode); // Set booking confirmation code\r\n//         setShowMessage(true); // Show message\r\n//         // Hide message and navigate to homepage after 5 seconds\r\n//         setTimeout(() => {\r\n//           setShowMessage(false);\r\n//           navigate('/rooms'); // Navigate to rooms\r\n//         }, 10000);\r\n//       }\r\n//     } catch (error) {\r\n//       setErrorMessage(error.response?.data?.message || error.message);\r\n//       setTimeout(() => setErrorMessage(''), 5000); // Clear error message after 5 seconds\r\n//     }\r\n//   };\r\n\r\n//   if (isLoading) {\r\n//     return <p className='room-detail-loading'>Loading room details...</p>;\r\n//   }\r\n\r\n//   if (error) {\r\n//     return <p className='room-detail-loading'>{error}</p>;\r\n//   }\r\n\r\n//   if (!roomDetails) {\r\n//     return <p className='room-detail-loading'>Room not found.</p>;\r\n//   }\r\n\r\n//   const { roomType, roomPrice, roomPhoto, description, bookings } = roomDetails;\r\n\r\n//   return (\r\n//     <div className=\"room-details-booking\">\r\n//       {showMessage && (\r\n//         <p className=\"booking-success-message\">\r\n//           Booking successful! Confirmation code: {confirmationCode}. An SMS and email of your booking details have been sent to you.\r\n//         </p>\r\n//       )}\r\n//       {errorMessage && (\r\n//         <p className=\"error-message\">\r\n//           {errorMessage}\r\n//         </p>\r\n//       )}\r\n//       <h2>Room Details</h2>\r\n//       <br />\r\n//       {roomPhoto&& (\r\n//                             <img\r\n//                                 src={`data:image/jpeg;base64,${roomPhoto}`}\r\n//                                 alt={roomType}\r\n//                                 style={{ width: '200px', height: '150px' }}\r\n//                             />\r\n//                         )}\r\n//       <div className=\"room-details-info\">\r\n//         <h3>{roomType}</h3>\r\n//         <p>Price: â‚¹{roomPrice}</p>\r\n//         <p>{description}</p>\r\n//       </div>\r\n//       {bookings && bookings.length > 0 && (\r\n//         <div>\r\n//           <h3>Existing Booking Details</h3>\r\n//           <ul className=\"booking-list\">\r\n//             {bookings.map((booking, index) => (\r\n//               <li key={booking.id} className=\"booking-item\">\r\n//                 <span className=\"booking-number\">Booking {index + 1} </span>\r\n//                 <span className=\"booking-text\">Check-in: {booking.checkInDate} </span>\r\n//                 <span className=\"booking-text\">Out: {booking.checkOutDate}</span>\r\n//               </li>\r\n//             ))}\r\n//           </ul>\r\n//         </div>\r\n//       )}\r\n//       <div className=\"booking-info\">\r\n//         <button className=\"book-now-button\" onClick={() => setShowDatePicker(true)}>Book Now</button>\r\n//         <button className=\"go-back-button\" onClick={() => setShowDatePicker(false)}>Go Back</button>\r\n//         {showDatePicker && (\r\n//           <div className=\"date-picker-container\">\r\n//             <DatePicker\r\n//               className=\"detail-search-field\"\r\n//               selected={checkInDate}\r\n//               onChange={(date) => setCheckInDate(date)}\r\n//               selectsStart\r\n//               startDate={checkInDate}\r\n//               endDate={checkOutDate}\r\n//               placeholderText=\"Check-in Date\"\r\n//               dateFormat=\"dd/MM/yyyy\"\r\n//               // dateFormat=\"yyyy-MM-dd\"\r\n//             />\r\n//             <DatePicker\r\n//               className=\"detail-search-field\"\r\n//               selected={checkOutDate}\r\n//               onChange={(date) => setCheckOutDate(date)}\r\n//               selectsEnd\r\n//               startDate={checkInDate}\r\n//               endDate={checkOutDate}\r\n//               minDate={checkInDate}\r\n//               placeholderText=\"Check-out Date\"\r\n//               // dateFormat=\"yyyy-MM-dd\"\r\n//               dateFormat=\"dd/MM/yyyy\"\r\n//             />\r\n\r\n//             <div className='guest-container'>\r\n//               <div className=\"guest-div\">\r\n//                 <label>Adults:</label>\r\n//                 <input\r\n//                   type=\"number\"\r\n//                   min=\"1\"\r\n//                   value={numAdults}\r\n//                   onChange={(e) => setNumAdults(parseInt(e.target.value))}\r\n//                 />\r\n//               </div>\r\n//               <div className=\"guest-div\">\r\n//                 <label>Children:</label>\r\n//                 <input\r\n//                   type=\"number\"\r\n//                   min=\"0\"\r\n//                   value={numChildren}\r\n//                   onChange={(e) => setNumChildren(parseInt(e.target.value))}\r\n//                 />\r\n//               </div>\r\n//               <button className=\"confirm-booking\" onClick={handleConfirmBooking}>Confirm Booking</button>\r\n//             </div>\r\n//           </div>\r\n//         )}\r\n//         {totalPrice > 0 && (\r\n//           <div className=\"total-price\">\r\n//             <p>Total Price: â‚¹{totalPrice}</p>\r\n//             <p>Total Guests: {totalGuests}</p>\r\n//             <button onClick={acceptBooking} className=\"accept-booking\">Accept Booking</button>\r\n//           </div>\r\n//         )}\r\n//       </div>\r\n//     </div>\r\n//   );\r\n// };\r\n\r\n// export default RoomDetailsPage;\r\n\r\n// new code\r\n\r\nimport React, { useState, useEffect } from 'react';\r\nimport { useParams, useLocation, useNavigate } from 'react-router-dom';\r\nimport ApiService from '../../service/ApiService';\r\nimport DatePicker from 'react-datepicker';\r\nimport 'react-datepicker/dist/react-datepicker.css';\r\n\r\nconst RoomDetailsPage = () => {\r\n  const navigate = useNavigate();\r\n  const { roomId } = useParams();\r\n  const location = useLocation();\r\n  const { startDate: initialCheckInDate, endDate: initialCheckOutDate } = location.state || {};\r\n  \r\n  const [roomDetails, setRoomDetails] = useState(null);\r\n  const [isLoading, setIsLoading] = useState(true);\r\n  const [error, setError] = useState(null);\r\n  const [checkInDate, setCheckInDate] = useState(initialCheckInDate ? new Date(initialCheckInDate) : new Date());\r\n  const [checkOutDate, setCheckOutDate] = useState(initialCheckOutDate ? new Date(initialCheckOutDate) : new Date());\r\n  const [numAdults, setNumAdults] = useState(1);\r\n  const [numChildren, setNumChildren] = useState(0);\r\n  const [totalPrice, setTotalPrice] = useState(0);\r\n  const [totalGuests, setTotalGuests] = useState(1);\r\n  const [showDatePicker, setShowDatePicker] = useState(false);\r\n  const [userId, setUserId] = useState('');\r\n  const [showMessage, setShowMessage] = useState(false);\r\n  const [confirmationCode, setConfirmationCode] = useState('');\r\n  const [errorMessage, setErrorMessage] = useState('');\r\n\r\n  useEffect(() => {\r\n    const fetchData = async () => {\r\n      try {\r\n        setIsLoading(true);\r\n        const response = await ApiService.getRoomById(roomId);\r\n        setRoomDetails(response.room);\r\n        const userProfile = await ApiService.getUserProfile();\r\n        setUserId(userProfile.user.id);\r\n      } catch (error) {\r\n        setError(error.response?.data?.message || error.message);\r\n      } finally {\r\n        setIsLoading(false);\r\n      }\r\n    };\r\n    fetchData();\r\n  }, [roomId]);\r\n\r\n  const handleConfirmBooking = () => {\r\n    if (!checkInDate || !checkOutDate) {\r\n      setErrorMessage('Please select check-in and check-out dates.');\r\n      setTimeout(() => setErrorMessage(''), 5000);\r\n      return;\r\n    }\r\n\r\n    if (isNaN(numAdults) || numAdults < 1 || isNaN(numChildren) || numChildren < 0) {\r\n      setErrorMessage('Please enter valid numbers for adults and children.');\r\n      setTimeout(() => setErrorMessage(''), 5000);\r\n      return;\r\n    }\r\n\r\n    const oneDay = 24 * 60 * 60 * 1000;\r\n    const totalDays = Math.round(Math.abs((checkOutDate - checkInDate) / oneDay)) + 1;\r\n    const totalGuests = numAdults + numChildren;\r\n    const totalPrice = roomDetails.roomPrice * totalDays;\r\n\r\n    setTotalPrice(totalPrice);\r\n    setTotalGuests(totalGuests);\r\n  };\r\n\r\n  const acceptBooking = async () => {\r\n    try {\r\n      const formattedCheckInDate = new Date(checkInDate.getTime() - (checkInDate.getTimezoneOffset() * 60000)).toISOString().split('T')[0];\r\n      const formattedCheckOutDate = new Date(checkOutDate.getTime() - (checkOutDate.getTimezoneOffset() * 60000)).toISOString().split('T')[0];\r\n\r\n      const booking = {\r\n        checkInDate: formattedCheckInDate,\r\n        checkOutDate: formattedCheckOutDate,\r\n        numOfAdults: numAdults,\r\n        numOfChildren: numChildren\r\n      };\r\n\r\n      const response = await ApiService.bookRoom(roomId, userId, booking);\r\n      if (response.statusCode === 200) {\r\n        setConfirmationCode(response.bookingConfirmationCode);\r\n        setShowMessage(true);\r\n        setTimeout(() => {\r\n          setShowMessage(false);\r\n          navigate('/rooms');\r\n        }, 10000);\r\n      }\r\n    } catch (error) {\r\n      setErrorMessage(error.response?.data?.message || error.message);\r\n      setTimeout(() => setErrorMessage(''), 5000);\r\n    }\r\n  };\r\n\r\n  if (isLoading) {\r\n    return <p className='room-detail-loading'>Loading room details...</p>;\r\n  }\r\n\r\n  if (error) {\r\n    return <p className='room-detail-loading'>{error}</p>;\r\n  }\r\n\r\n  if (!roomDetails) {\r\n    return <p className='room-detail-loading'>Room not found.</p>;\r\n  }\r\n\r\n  const { roomType, roomPrice, roomPhoto, description, bookings } = roomDetails;\r\n\r\n  return (\r\n    <div className=\"room-details-booking\">\r\n      {showMessage && (\r\n        <p className=\"booking-success-message\">\r\n          Booking successful! Confirmation code: {confirmationCode}. An SMS and email of your booking details have been sent to you.\r\n        </p>\r\n      )}\r\n      {errorMessage && (\r\n        <p className=\"error-message\">\r\n          {errorMessage}\r\n        </p>\r\n      )}\r\n      <h2>Room Details</h2>\r\n      <br />\r\n      {roomPhoto && (\r\n        <img\r\n          src={`data:image/jpeg;base64,${roomPhoto}`}\r\n          alt={roomType}\r\n          style={{ width: '200px', height: '150px' }}\r\n        />\r\n      )}\r\n      <div className=\"room-details-info\">\r\n        <h3>{roomType}</h3>\r\n        <p>Price: â‚¹{roomPrice}</p>\r\n        <p>{description}</p>\r\n      </div>\r\n      {bookings && bookings.length > 0 && (\r\n        <div>\r\n          <h3>Existing Booking Details</h3>\r\n          <ul className=\"booking-list\">\r\n            {bookings.map((booking, index) => (\r\n              <li key={booking.id} className=\"booking-item\">\r\n                <span className=\"booking-number\">Booking {index + 1} </span>\r\n                <span className=\"booking-text\">Check-in: {booking.checkInDate} </span>\r\n                <span className=\"booking-text\">Out: {booking.checkOutDate}</span>\r\n              </li>\r\n            ))}\r\n          </ul>\r\n        </div>\r\n      )}\r\n      <div className=\"booking-info\">\r\n        <button className=\"book-now-button\" onClick={() => setShowDatePicker(true)}>Book Now</button>\r\n        {showDatePicker && (\r\n          <div className=\"date-picker-container\">\r\n            <DatePicker\r\n              className=\"detail-search-field\"\r\n              selected={checkInDate}\r\n              onChange={(date) => setCheckInDate(date)}\r\n              selectsStart\r\n              startDate={checkInDate}\r\n              endDate={checkOutDate}\r\n              placeholderText=\"Check-in Date\"\r\n              dateFormat=\"dd/MM/yyyy\"\r\n              minDate={new Date()}\r\n            />\r\n            <DatePicker\r\n              className=\"detail-search-field\"\r\n              selected={checkOutDate}\r\n              onChange={(date) => setCheckOutDate(date)}\r\n              selectsEnd\r\n              startDate={checkInDate}\r\n              endDate={checkOutDate}\r\n              minDate={checkInDate}\r\n              placeholderText=\"Check-out Date\"\r\n              dateFormat=\"dd/MM/yyyy\"\r\n            />\r\n            <div className='guest-container'>\r\n              <div className=\"guest-div\">\r\n                <label>Adults:</label>\r\n                <input\r\n                  type=\"number\"\r\n                  min=\"1\"\r\n                  value={numAdults}\r\n                  onChange={(e) => setNumAdults(parseInt(e.target.value))}\r\n                />\r\n              </div>\r\n              <div className=\"guest-div\">\r\n                <label>Children:</label>\r\n                <input\r\n                  type=\"number\"\r\n                  min=\"0\"\r\n                  value={numChildren}\r\n                  onChange={(e) => setNumChildren(parseInt(e.target.value))}\r\n                />\r\n              </div>\r\n              <button className=\"confirm-booking\" onClick={handleConfirmBooking}>Confirm Booking</button>\r\n            </div>\r\n          </div>\r\n        )}\r\n        {totalPrice > 0 && (\r\n          <div className=\"total-price\">\r\n            <p>Total Price: â‚¹{totalPrice}</p>\r\n            <p>Total Guests: {totalGuests}</p>\r\n            <button onClick={acceptBooking} className=\"accept-booking\">Accept Booking</button>\r\n          </div>\r\n        )}\r\n        <button className=\"go-back-button\" onClick={() => navigate('/rooms')}>Go Back</button>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default RoomDetailsPage;"],"mappings":";;AAAA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAGA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,SAASC,SAAS,EAAEC,WAAW,EAAEC,WAAW,Q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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}